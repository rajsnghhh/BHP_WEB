{"version":3,"sources":["./src/app/modules/branch-village-map/branch-village-map.service.ts","./src/app/modules/branch-village-map/branch-village-map.module.ts","./src/app/modules/branch-village-map/branch-village-map-routing.module.ts","./src/app/modules/branch-village-map/branch-village-map.component.ts","./src/app/modules/branch-village-map/branch-village-map.component.html"],"names":[],"mappings":"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","file":"modules-branch-village-map-branch-village-map-module.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BranchVillageMapService {\n\n  baseURL = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n  listOfRegionsOfUser(obj): any {\n    return this.http.post(`${this.baseURL}branch/getListOfRegionsOfUser`, obj)\n  }\n\n  listOfBranchesOfARegion(obj): any {\n    return this.http.post(`${this.baseURL}branch/getListOfBranchesOfARegion`, obj)\n  }\n\n  flatListVillagesOfBranch(obj): any {\n    return this.http.post(`${this.baseURL}village/getFlatListOfVillagesOfABranch`, obj)\n  }\n\n  getStateList(obj): any {\n    return this.http.post(`${this.baseURL}state/getListOfAllStates`, obj)\n  }\n\n  getDistrictAndBlockList(obj): any {\n    return this.http.post(`${this.baseURL}district/getListOfDistrictAndBlock`, obj)\n  }\n\n  getUnmappedVillagesOfGP(obj): any {\n    return this.http.post(`${this.baseURL}branchVillageMap/getUnmappedVillagesOfAGp`, obj)\n  }\n\n  mapVillagesToABranch(obj): any {\n    return this.http.post(`${this.baseURL}branchVillageMap/mapVillagesToABranch`, obj)\n  }\n\n  unmapVillagesFromABranch(obj): any {\n    return this.http.post(`${this.baseURL}branchVillageMap/unmapVillages`, obj)\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BranchVillageMapRoutingModule } from './branch-village-map-routing.module';\nimport { BranchVillageMapComponent } from './branch-village-map.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\n\n@NgModule({\n  declarations: [BranchVillageMapComponent],\n  imports: [\n    CommonModule,\n    BranchVillageMapRoutingModule,\n    ReactiveFormsModule,\n    NgxPaginationModule,\n  ]\n})\nexport class BranchVillageMapModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BranchVillageMapComponent } from './branch-village-map.component';\n\nconst routes: Routes = [{ path: '', component: BranchVillageMapComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BranchVillageMapRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ToastrService } from 'ngx-toastr';\nimport { HttpService } from '../core/http/http.service';\nimport { ConfirmationDialogService } from '../shared/confirmation-dialog/confirmation-dialog.service';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { BranchVillageMapService } from './branch-village-map.service';\n\n@Component({\n  selector: 'app-branch-village-map',\n  templateUrl: './branch-village-map.component.html',\n  styleUrls: ['./branch-village-map.component.css']\n})\nexport class BranchVillageMapComponent implements OnInit {\n  branchVillageForm: FormGroup;\n  mapVillForm: FormGroup;\n  regionList: Array<any> = [];\n  branchList: Array<any> = [];\n  mappedVillageList: Array<any> = [];\n  stateList: Array<any> = [];\n  districtList: Array<any> = [];\n  blockList: Array<any> = [];\n  gpList: Array<any> = [];\n  unmappedVillageList: Array<any> = [];\n  branchId: any;\n  branchName: any;\n  districtId: any;\n  districtName: any;\n  page = 1;\n  pageSize = 6;\n  p: any;\n  modalContent: any;\n  modalReference: any;\n  checkMapDataPushPop = {\n    dataAccessDTO: {},\n    branchId: '',\n    villageIdList: [],\n  };\n  checkUnmapDataPushPop = {\n    dataAccessDTO: {},\n    branchId: '',\n    villageIdList: [],\n  };\n  role:any;\n  createMode: boolean;\n\n  constructor(private fb: FormBuilder, private branchVillMapService: BranchVillageMapService, private httpService: HttpService,\n    private modalService: NgbModal, private toaster: ToastrService, private confirmationDialogService: ConfirmationDialogService,\n    private sidebarService: SidebarService) { }\n\n  ngOnInit(): void {\n    this.role = this.sidebarService.RoleDTOName;\n    console.log(this.role);\n\n    this.createForm();\n\n    let obj = { dataAccessDTO: this.httpService.dataAccessDTO }\n    this.branchVillMapService.listOfRegionsOfUser(obj).subscribe((res) => {\n      this.regionList = res.responseObject;\n      console.log(this.regionList);\n    });\n\n    this.createMode = this.sidebarService.subMenuList\n    .find(functionShortName => functionShortName.functionShortName == 'Branch Setup')?.subMenuDetailList\n    .find(subFunctionMasterId => subFunctionMasterId.subFunctionMasterId == 57)?.accessDetailList\n    .find(accessType => accessType.accessType == 'create')?.accessType ? true : false;\n\n  }\n\n  changeRegion(regionId) {\n    console.log(regionId);\n\n    let req = {\n      dataAccessDTO: this.httpService.dataAccessDTO,\n      regionId: regionId,\n    };\n    this.branchVillMapService.listOfBranchesOfARegion(req).subscribe((res) => {\n      this.branchList = res.responseObject;\n      console.log(res);\n\n    }, (error) => {\n      this.branchList = null;\n    }\n    );\n    this.branchVillageForm.controls.branch.setValue('');\n    this.mappedVillageList = [];\n    this.checkUnmapDataPushPop.villageIdList = [];\n    if (this.branchVillageForm.value.region == '') {\n      this.branchVillageForm.controls.branch.setValue('');\n      this.mappedVillageList = [];\n      this.checkUnmapDataPushPop.villageIdList = [];\n    }\n  }\n\n  changeBranch(branchId) {\n    this.branchId = branchId;\n    this.branchName = this.branchList.find(item => item.branchId == this.branchId)?.branchName;\n    console.log(this.branchName);\n\n    var district = this.branchList.find(dis => dis.districtMasterDto.districtMasterId == this.branchId)?.districtMasterDto;\n    this.districtName = district?.districtName;\n    this.districtId = district?.districtMasterId;\n    console.log(this.districtName, this.districtId);\n\n    let Dto = {\n      dataAccessDTO: this.httpService.dataAccessDTO,\n      branchId: this.branchId\n    }\n    this.branchVillMapService.flatListVillagesOfBranch(Dto).subscribe((res) => {\n      this.mappedVillageList = res.responseObject;\n      console.log(this.mappedVillageList, 'mappedVillageList');\n    });\n\n    this.mappedVillageList = [];\n    this.checkUnmapDataPushPop.villageIdList = [];\n\n    if (this.branchVillageForm.value.branch == '') {\n      this.mappedVillageList = [];\n      this.checkUnmapDataPushPop.villageIdList = [];\n    }\n  }\n\n  createForm() {\n    this.branchVillageForm = this.fb.group({\n      region: ['', Validators.required],\n      branch: ['', Validators.required]\n    });\n\n  }\n\n  get f() {\n    return this.branchVillageForm.controls;\n  }\n\n  mapVillForms(mapVill) {\n    this.mapVillForm = this.fb.group({\n      state: ['', Validators.required],\n      district: ['', Validators.required],\n      block: ['', Validators.required],\n      gp: ['', Validators.required]\n    });\n\n  }\n\n  mapVillage(mapVill) {\n\n    this.modalContent = '';\n    this.modalReference = this.modalService.open(mapVill, {\n      windowClass: 'mapVill',\n    });\n    this.mapVillForms(mapVill);\n\n    // Api call for viewing state list\n    let obj = {\n      dataAccessDTO: this.httpService.dataAccessDTO\n    }\n\n    this.branchVillMapService.getStateList(obj).subscribe((res) => {\n      this.stateList = res.responseObject.stateList;\n      console.log(this.stateList);\n    });\n  }\n\n  changeState(stateId) {\n\n    let obj = {\n      dataAccessDTO: this.httpService.dataAccessDTO,\n      stateId: stateId\n    }\n\n    this.branchVillMapService.getDistrictAndBlockList(obj).subscribe((res) => {\n      this.districtList = res.responseObject.stateWiseDistrictList;\n      console.log(this.districtList);\n    })\n\n    this.mapVillForm.controls.district.setValue('');\n    this.mapVillForm.controls.block.setValue('');\n    this.mapVillForm.controls.gp.setValue('');\n    this.unmappedVillageList = [];\n    this.checkMapDataPushPop.villageIdList = [];\n    if (this.mapVillForm.value.state == '') {\n      this.mapVillForm.controls.district.setValue('');\n      this.mapVillForm.controls.block.setValue('');\n      this.mapVillForm.controls.gp.setValue('');\n      this.unmappedVillageList = [];\n      this.checkMapDataPushPop.villageIdList = [];\n    }\n\n  }\n\n  changeDistrict(districtId) {\n    console.log(districtId);\n\n    this.blockList = this.districtList.find(block => block.districtMasterId == districtId)?.blockList;\n    console.log(this.blockList);\n\n    this.mapVillForm.controls.block.setValue('');\n    this.mapVillForm.controls.gp.setValue('');\n    this.unmappedVillageList = [];\n    this.checkMapDataPushPop.villageIdList = [];\n\n    if (this.mapVillForm.value.district == '') {\n      this.mapVillForm.controls.block.setValue('');\n      this.mapVillForm.controls.gp.setValue('');\n      this.unmappedVillageList = [];\n      this.checkMapDataPushPop.villageIdList = [];\n    }\n  }\n\n  changeBlock(blockId) {\n    console.log(blockId);\n\n    this.gpList = this.blockList.find(gp => gp.blockMasterId == blockId)?.gpDtoList;\n    console.log(this.gpList);\n    this.mapVillForm.controls.gp.setValue('');\n    this.unmappedVillageList = [];\n    this.checkMapDataPushPop.villageIdList = [];\n    if (this.mapVillForm.value.block == '') {\n      this.mapVillForm.controls.gp.setValue('');\n      this.unmappedVillageList = [];\n      this.checkMapDataPushPop.villageIdList = [];\n    }\n  }\n\n  changeGp(GPID) {\n    console.log(GPID);\n\n    let obj = { dataAccessDTO: this.httpService.dataAccessDTO, gpMunicipalId: GPID };\n    this.branchVillMapService.getUnmappedVillagesOfGP(obj).subscribe((res) => {\n      this.unmappedVillageList = res.responseObject;\n      console.log(this.unmappedVillageList);\n    });\n\n    this.unmappedVillageList = [];\n    this.checkMapDataPushPop.villageIdList = [];\n    if (this.mapVillForm.value.gp == '') {\n      this.unmappedVillageList = [];\n      this.checkMapDataPushPop.villageIdList = [];\n    }\n\n  }\n\n  get v() {\n    return this.mapVillForm.controls;\n  }\n\n  branchVillModalDismiss() {\n    this.modalReference?.close();\n    this.unmappedVillageList = [];\n  }\n\n  mapVillCheck(e, villId) {\n    var checkboxData = e.target.checked;\n    if (checkboxData) {\n      this.checkMapDataPushPop.dataAccessDTO = this.httpService.dataAccessDTO,\n        this.checkMapDataPushPop.branchId = this.branchId,\n        this.checkMapDataPushPop.villageIdList.push({ villageId: villId });\n    } else {\n      var i = this.checkMapDataPushPop.villageIdList.findIndex(list => list.villageId == villId);\n      this.checkMapDataPushPop.villageIdList.splice(i, 1);\n    }\n    console.log(this.checkMapDataPushPop, 'checkMapDataPushPop');\n\n  }\n\n  saveMapVill() {\n    if (this.mapVillForm.value.district != this.districtId) {\n      this.confirmationDialogService.confirm('', 'You are mapping villages of a different district with the' + ' ' + this.branchName + ' ' + '.')\n        .then(() => this.map()\n        )\n        .catch(() => '');\n\n    }\n    else {\n      this.confirmationDialogService.confirm('', 'Are you sure you want to map selected villages to the' + ' ' + this.branchName + ' ' + '?')\n        .then(() => this.map()\n        )\n        .catch(() => '');\n\n    }\n\n    console.log(this.mapVillForm.value.district, 'this.mapVillForm.value.district');\n    console.log(this.districtId, 'this.districtId');\n\n  }\n\n  map() {\n    this.branchVillMapService.mapVillagesToABranch(this.checkMapDataPushPop).subscribe((res) => {\n      console.log(res);\n      if (res.status == true) {\n        this.showSuccess(res.message);\n        this.branchVillModalDismiss();\n        this.changeBranch(this.branchId);\n      }\n      else {\n        this.showError(res.message);\n      }\n\n    });\n\n  }\n\n  unMapVillCheck(e, villId) {\n    var checkboxData = e.target.checked;\n    if (checkboxData) {\n      this.checkUnmapDataPushPop.dataAccessDTO = this.httpService.dataAccessDTO,\n        this.checkUnmapDataPushPop.villageIdList.push({ villageId: villId });\n    }\n    else {\n      var i = this.checkUnmapDataPushPop.villageIdList.findIndex(list => list.villageId == villId);\n      this.checkUnmapDataPushPop.villageIdList.splice(i, 1);\n    }\n\n    console.log(this.checkUnmapDataPushPop, 'checkUnmapDataPushPop');\n\n  }\n\n  saveunmapVill() {\n\n    this.confirmationDialogService.confirm('', 'Are you sure you want to unmap selected villages from the' + ' ' + this.branchName + ' ' + '?')\n      .then(() => this.unmap()\n      )\n      .catch(() => '');\n\n  }\n\n  unmap() {\n    this.branchVillMapService.unmapVillagesFromABranch(this.checkUnmapDataPushPop).subscribe((res) => {\n      console.log(res);\n      if (res.status == true) {\n        this.showSuccess(res.message);\n        this.changeBranch(this.branchId);\n      }\n      else {\n        this.showError(res.message);\n      }\n\n    })\n\n  }\n\n  showSuccess(message) {\n    this.toaster.success(message, 'Branch-Village Map', {\n      timeOut: 3000,\n    });\n  }\n\n  showError(message) {\n    this.toaster.error(message, 'Branch-Village Map', {\n      timeOut: 3000,\n    });\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"white_box QA_section mb_30\">\n\n                <div id=\"header-fixed\" style=\"display: flex;\">\n                    <h2 class=\"page-title\">Branch-Village Map</h2>\n\n                </div>\n\n                <form class=\"form-signin\" [formGroup]=\"branchVillageForm\">\n\n                    <div class=\"row\">\n                        <div class=\"form-group col-md\">\n                            <label for=\"region\">Region :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeRegion($event.target.value)\"\n                                formControlName=\"region\" id=\"region\" [ngClass]=\"{ 'is-invalid': f.region.invalid && f.region.touched, \n                                'is-valid': f.region.valid && (f.region.dirty || f.region.touched)}\">\n                                <option value=\"\">-- Select Region --</option>\n                                <option *ngFor=\"let region of regionList\" value=\"{{region.regionMasterId}}\">\n                                    {{region.regionName}}\n                                </option>\n                            </select>\n                            <div *ngIf=\"f.region.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"f.region.errors.required\">Region selection is required</div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"branch\">Branch :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeBranch($event.target.value)\"\n                                formControlName=\"branch\" id=\"branch\" [ngClass]=\"{'is-invalid': f.branch.invalid && f.branch.touched,\n                              'is-valid': f.branch.valid && (f.branch.dirty || f.branch.touched)}\">\n                                <option value=\"\">-- Select Branch --</option>\n                                <option *ngFor=\"let branch of branchList\" value=\"{{branch.branchId}}\">\n                                    {{ branch.branchName }}\n                                </option>\n                            </select>\n                            <div *ngIf=\"f.branch.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"f.branch.errors.required\">Branch selection is required</div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n\n                        <div class=\"form-group col-md-12\" id=\"buttonRight\">\n                            <button class=\"btn btn-primary\" (click)=\"mapVillage(mapVill)\"\n                                *ngIf=\"branchVillageForm.value.branch && createMode\">Map\n                                Village</button>\n                        </div>\n                    </div>\n\n                    <div class=\" white_box_tittle list_header\">\n\n                        <div class=\"QA_table \">\n                            <div id=\"DataTables_Table_0_wrapper\" class=\"dataTables_wrapper no-footer\">\n                                <table\n                                    class=\"table lms_table_active dataTable no-footer dtr-inline collapsed table table-striped\"\n                                    role=\"grid\" aria-describedby=\"DataTables_Table_0_info\" style=\"table-layout: fixed;\">\n\n                                    <thead id=\"header-fixed\">\n                                        <tr>\n                                            <th>SL No</th>\n                                            <th>District</th>\n                                            <th>Block</th>\n                                            <th>GP</th>\n                                            <th>Village</th>\n                                            <th *ngIf=\"createMode\">Un-Map Village</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n\n                                        <tr *ngFor=\"let unmap of mappedVillageList; index as i\">\n                                            <td>{{(p-1)*5+i+1 ? (p-1)*5+i+1 : i+1}}</td>\n                                            <td>{{unmap.districtDto.districtName}}</td>\n                                            <td>{{unmap.blockDto.blockName}}</td>\n                                            <td>{{unmap.gpDto.gpName}}</td>\n                                            <td>{{unmap.villageName}}</td>\n                                            <td *ngIf=\"createMode\"><input class=\"form-check-input\"\n                                                    type=\"checkbox\" value=\"\" id=\"flexCheckDefault\"\n                                                    (change)=\"unMapVillCheck($event, unmap.villageId)\">\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table> <br>\n\n                                <div class=\"row\">\n                                    <div class=\"form-group col-md-6\">\n                                        <button type=\"button\" class=\" btn btn-primary bttn\"\n                                            [disabled]=\"checkUnmapDataPushPop.villageIdList.length == 0\"\n                                            (click)=\"saveunmapVill()\" *ngIf=\"role == 'PO' || role == 'PM'\">Save</button>\n                                    </div>\n\n                                    <div class=\"form-group col-md-6\">\n                                        <!-- <pagination-controls\n                                            class=\"d-flex justify-content-end p-1 current ngx-pagination1\"\n                                            (pageChange)=\"p = $event\" (pageBoundsCorrection)=\"p = $event \">\n                                        </pagination-controls> -->\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n\n                </form>\n\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #mapVill>\n\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n\n            <div class=\"row\">\n                <div class=\"form-group col-md-5\">\n                    <label for=\"branch\" style=\"font-weight: 500;\n                    font-size: 1.05rem;\">Branch :</label>&nbsp;&nbsp;&nbsp;\n                    {{branchName}}\n                </div>\n\n                <div class=\"form-group col-md-5\">\n                    <label for=\"\" style=\"font-weight: 500;\n                        font-size: 1.05rem;\">District :</label>&nbsp;&nbsp;&nbsp;\n                    {{districtName ? districtName : '-'}}\n                </div>\n\n                <div class=\"col-md-2\">\n                    <span class=\"close\" (click)=\"branchVillModalDismiss()\"\n                        style=\"cursor: pointer;font-size: 35px;\">&times;</span>\n                </div>\n\n            </div>\n\n        </div>\n\n        <div class=\"modal-body\">\n            <form class=\"form-signin\" [formGroup]=\"mapVillForm\">\n                <div class=\"row\">\n                    <div class=\"form-group col-md\">\n                        <label for=\"state\">State :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                        <select class=\"form-select\" (change)=\"changeState($event.target.value)\" formControlName=\"state\"\n                            [ngClass]=\"{'is-invalid': v.state.invalid && v.state.touched, 'is-valid': \n                                v.state.valid && (v.state.dirty || v.state.touched)}\">\n                            <option value=\"\">-- Select --</option>\n                            <option *ngFor=\"let state of stateList; index as i\" value=\"{{state.stateMasterId}}\">\n                                {{state.stateName}}</option>\n                        </select>\n                        <div *ngIf=\"v.state.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"v.state.errors.required\">\n                                State selection is required\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group col-md\">\n                        <label for=\"district\">District :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                        <select class=\"form-select\" (change)=\"changeDistrict($event.target.value)\"\n                            formControlName=\"district\" [ngClass]=\"{'is-invalid': v.district.invalid && v.district.touched,\n                                'is-valid': v.district.valid && (v.district.dirty || v.district.touched)}\">\n                            <option value=\"\">-- Select --</option>\n                            <option *ngFor=\"let district of districtList; index as i\"\n                                value=\"{{district.districtMasterId}}\">\n                                {{district.districtName}}</option>\n                        </select>\n                        <div *ngIf=\"v.district.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"v.district.errors.required\">\n                                District selection is required\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group col-md\">\n                        <label for=\"block\">Block :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                        <select class=\"form-select\" (change)=\"changeBlock($event.target.value)\" formControlName=\"block\"\n                            [ngClass]=\"{'is-invalid': v.block.invalid && v.block.touched,\n                                'is-valid': v.block.valid && (v.block.dirty || v.block.touched)}\">\n                            <option value=\"\">-- Select --</option>\n                            <option *ngFor=\"let block of blockList; index as i\" value=\"{{block.blockMasterId}}\">\n                                {{block.blockName}} </option>\n                        </select>\n                        <div *ngIf=\"v.block.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"v.block.errors.required\">\n                                Block selection is required\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group col-md\">\n                        <label for=\"gp\">GP/ Municipality :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                        <select class=\"form-select\" (change)=\"changeGp($event.target.value)\" formControlName=\"gp\"\n                            id=\"gp\" [ngClass]=\"{'is-invalid': v.gp.invalid && v.gp.touched,\n                              'is-valid': v.gp.valid && (v.gp.dirty || v.gp.touched) }\">\n                            <option value=\"\">-- Select --</option>\n                            <option *ngFor=\"let gp of gpList\" value=\"{{gp.gpMunicipalId}}\">\n                                {{ gp.name }}\n                            </option>\n                        </select>\n                        <div *ngIf=\"v.gp.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"v.gp.errors.required\">\n                                GP selection is required\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n\n                <div class=\" white_box_tittle list_header\">\n\n                    <div class=\"QA_table \">\n                        <div id=\"DataTables_Table_0_wrapper\" class=\"dataTables_wrapper no-footer\">\n                            <table\n                                class=\"table lms_table_active dataTable no-footer dtr-inline collapsed table table-striped\"\n                                role=\"grid\" aria-describedby=\"DataTables_Table_0_info\"\n                                style=\"table-layout: fixed; text-align:center \">\n                                <thead id=\"header_fixed\">\n                                    <tr>\n                                        <th>SL No</th>\n                                        <th>District</th>\n                                        <th>Block</th>\n                                        <th>GP</th>\n                                        <th>Village</th>\n                                        <th>Map Village</th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n\n                                    <tr *ngFor=\"let map of unmappedVillageList ; index as i\">\n                                        <td>{{(p-1)*5+i+1 ? (p-1)*5+i+1 : i+1}}</td>\n                                        <td>{{map.districtDetailsDto.districtName}}</td>\n                                        <td>{{map.blockDetailsDto.blockName}}</td>\n                                        <td>{{map.gpDetailsDto.name}}</td>\n                                        <td>{{map.villageName}}</td>\n                                        <td> <input class=\"form-check-input\" type=\"checkbox\" value=\"\"\n                                                id=\"flexCheckDefault\"\n                                                (change)=\"mapVillCheck($event, map.villageMasterId)\"> </td>\n                                    </tr>\n\n                                </tbody>\n                            </table>\n\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n\n        <div class=\"modal-footer\">\n            <div class=\"row\">\n                <button type=\"button\" class=\" btn btn-primary bttn\" (click)=\"saveMapVill()\"\n                    [disabled]=\"checkMapDataPushPop.villageIdList.length == 0\">Save</button>\n            </div>\n        </div>\n    </div>\n\n</ng-template>"],"sourceRoot":"webpack:///"}