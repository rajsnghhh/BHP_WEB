{"version":3,"sources":["./src/app/modules/daily-activity-register/daily-activity-register.component.ts","./src/app/modules/daily-activity-register/daily-activity-register.component.html","./src/app/modules/daily-activity-register/daily-activity-register-routing.module.ts","./src/app/modules/daily-activity-register/daily-activity-register.service.ts","./src/app/modules/daily-activity-register/daily-activity-register.module.ts"],"names":[],"mappings":"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","file":"modules-daily-activity-register-daily-activity-register-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { ValidationService } from '../shared/services/validation.service';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { DailyActivityRegisterService } from './daily-activity-register.service';\nimport { HttpService } from '../core/http/http.service';\n\n@Component({\n  selector: 'app-daily-activity-register',\n  templateUrl: './daily-activity-register.component.html',\n  styleUrls: ['./daily-activity-register.component.css']\n})\n\nexport class DailyActivityRegisterComponent implements OnInit {\n  locationForm: FormGroup;\n  regionList: Array<any> = [];\n  branchList: Array<any> = [];\n  villagesOfBranch: Array<any> = [];\n  gpDtoList: Array<any> = [];\n  villageDtoList: Array<any> = [];\n  selectedBlock: String;\n  selectedGp: String;\n  branchVillageMapId: any;\n  villageMasterId: any;\n  hcoList: any;\n  hcoId: any;\n  darList: any;\n  darViewFamilyList: any;\n  page = 1;\n  pageSize = 6;\n  p: any;\n  role: any;\n\n\n  constructor(private fb: FormBuilder, public validationService: ValidationService, private sidebarService: SidebarService,\n    private dailyActivityService: DailyActivityRegisterService, private toaster: ToastrService, private httpService: HttpService) { }\n\n  ngOnInit(): void {\n    this.role = this.sidebarService.RoleDTOName;\n\n    this.locForm();\n    let Dto = {\n      dataAccessDTO: this.httpService.dataAccessDTO,\n      branchId: this.sidebarService.branchId\n    }\n\n    setTimeout(() => {\n      if (this.sidebarService.RoleDTOName.indexOf('HCO') != -1 || this.sidebarService.RoleDTOName.indexOf('TL') != -1) {\n        this.dailyActivityService.villagesOfBranch(Dto).subscribe((res) => {\n          if (res.sessionDTO.status == true) {\n            this.villagesOfBranch = res.responseObject;\n            console.log(this.villagesOfBranch, 'villagesOfBranch1');\n          }\n        })\n      }\n    }, 1000);\n\n    this.regionList = this.sidebarService.listOfRegion;\n\n  }\n\n  changeRegion(region) {\n    let regionId = this.regionList.find((reg) => reg.regionName == region)?.regionMasterId;\n    let req = {\n      dataAccessDTO: this.httpService.dataAccessDTO,\n      regionId: regionId,\n    };\n\n    setTimeout(() => {\n      this.dailyActivityService.listOfBranchesOfARegion(req).subscribe((res) => {\n        this.branchList = res?.responseObject;\n      },\n        (error) => {\n          this.branchList = null;\n        }\n      );\n    }, 500);\n    this.locationForm.controls.branch.setValue('');\n    if (this.locationForm.value.region == '') {\n      this.locationForm.controls.hco.setValue('');\n      this.locationForm.controls.fromDate.setValue('');\n      this.locationForm.controls.toDate.setValue('');\n      this.darList = [];\n      this.darViewFamilyList = [];\n      // this.showError('No Data Found');\n    }\n  }\n\n  changeBranch(branch) {\n    this.hcoId = branch;\n    this.sidebarService.branchId = this.branchList?.find(bran => bran.branchName == branch)?.branchId;\n    this.sidebarService.branchName = this.locationForm.get('branch').value\n    let Dto = {\n      dataAccessDTO: this.httpService.dataAccessDTO,\n      branchId: this.sidebarService.branchId\n    }\n\n    this.dailyActivityService.hcoListOfBranch(Dto).subscribe((res: any) => {\n      this.hcoList = res.responseObject;\n      console.log(this.hcoList, 'hcoList');\n    });\n\n\n    if (this.locationForm.value.branch == '') {\n      // this.showError('No Data Found');\n      this.locationForm.controls.hco.setValue('');\n      this.locationForm.controls.fromDate.setValue('');\n      this.locationForm.controls.toDate.setValue('');\n      this.darList = [];\n      this.darViewFamilyList = [];\n    }\n\n    if (this.locationForm.value.hco == '') {\n      this.locationForm.controls.fromDate.setValue('');\n      this.locationForm.controls.toDate.setValue('');\n      this.darList = [];\n      this.darViewFamilyList = [];\n    }\n\n  }\n\n  // changeBlock(blockname) {\n  //   this.gpDtoList = this.villagesOfBranch.find(block => block.blockName == blockname)?.gpDtoList;\n  //   this.selectedBlock = this.locationForm.get('block').value;\n  //   this.locationForm.controls.gp.setValue('');\n  //   this.locationForm.controls.gram.setValue('');\n  //   if (this.locationForm.value.block == '') {\n  //     this.showError('No Data Found');\n  //     // this.pemDetails = [];\n  //     this.villageDtoList = [];\n  //     this.gpDtoList = [];\n  //   }\n  // }\n  // changeGp(gpName) {\n  //   this.villageDtoList = this.villagesOfBranch.find(block => block.blockName == this.selectedBlock)?.gpDtoList.find(gp => gp.name == gpName)?.villageDtoList;\n  //   this.selectedGp = this.locationForm.get('gp').value;\n  //   this.locationForm.controls.gram.setValue('');\n  //   console.log(this.villageDtoList);\n\n  //   if (this.locationForm.value.gp == '') {\n  //     this.showError('No Data Found');\n  //     // this.pemDetails = [];\n  //     this.villageDtoList = [];\n  //   }\n  // }\n\n  // changeVillage(villagename) {\n  //   this.branchVillageMapId = this.villagesOfBranch.find(block => block.blockName == this.selectedBlock)?.gpDtoList.find(gp => gp.name == this.selectedGp)?.villageDtoList.find(vill => vill.villageName == villagename)?.branchVillageMapId;\n  //   this.villageMasterId = this.villageDtoList.find(vill => vill.villageName == villagename)?.villageMasterId\n  //   console.log(this.villageMasterId);\n\n  //   // this.viewPEMList();\n\n  //   if (this.locationForm.value.gram == '') {\n  //     this.showError('No Data Found');\n  //     // this.pemDetails = [];\n  //   }\n\n  // }\n\n\n  locForm() {\n    this.locationForm = this.fb.group({\n      region: ['', Validators.required],\n      branch: ['', Validators.required],\n      hco: ['', Validators.required],\n      fromDate: ['', Validators.required],\n      toDate: ['', Validators.required]\n    });\n\n  }\n\n  viewDAREntryList() {\n\n    let obj = {\n      dataAccessDTO: this.httpService.dataAccessDTO,\n      // hcoId: this.hcoId,\n      hcoId: this.hcoId ? this.hcoId : this.sidebarService.userId,\n      startDate: this.locationForm.value.fromDate,\n      endDate: this.locationForm.value.toDate,\n      withVisitPurposeMap: false\n    }\n\n    console.log(obj);\n\n    this.dailyActivityService.viewingDAREntryList(obj).subscribe((res) => {\n      this.darList = res.responseObject;\n      console.log(this.darList);\n\n    })\n\n  }\n\n\n  darViewFamily(item) {\n    this.darViewFamilyList = item;\n    console.log(this.darViewFamilyList, 'darViewFamily');\n  }\n\n  showSuccess(message) {\n    this.toaster.success(message, 'Daily-Activity Register', {\n      timeOut: 3000,\n    });\n  }\n\n  showError(message) {\n    this.toaster.error(message, 'Daily-Activity Register', {\n      timeOut: 3000,\n    });\n  }\n\n  restrictTypeOfDate() {\n    return false;\n  }\n\n  get l() {\n    return this.locationForm.controls;\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"white_box QA_section mb_30\">\n                <h2 class=\"page-title\">Daily Activity Register</h2>\n\n                <form class=\"form-signin\" [formGroup]=\"locationForm\">\n\n                    <div class=\"row\" *ngIf=\"role != 'HCO' && role != 'HCOI' && role != 'TL' \">\n                        <div class=\"form-group col-md\">\n                            <label for=\"region\">Region :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeRegion($event.target.value)\"\n                                formControlName=\"region\" id=\"region\" [ngClass]=\"{\n                              'is-invalid': l.region.invalid && l.region.touched,\n                              'is-valid':\n                                l.region.valid && (l.region.dirty || l.region.touched)\n                            }\">\n                                <option value=\"\">-- Select Region --</option>\n                                <option *ngFor=\"let region of regionList\">\n                                    {{region.regionName}}\n                                </option>\n                            </select>\n                            <div *ngIf=\"l.region.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"l.region.errors.required\">Region selection is required</div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"branch\">Branch :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeBranch($event.target.value)\"\n                                formControlName=\"branch\" id=\"branch\" [ngClass]=\"{\n                              'is-invalid': l.branch.invalid && l.branch.touched,\n                              'is-valid':\n                                l.branch.valid && (l.branch.dirty || l.branch.touched)\n                            }\">\n                                <option value=\"\">-- Select Branch --</option>\n                                <option *ngFor=\"let branch of branchList\">\n                                    {{ branch.branchName }}\n                                </option>\n                            </select>\n                            <div *ngIf=\"l.branch.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"l.branch.errors.required\">Branch selection is required</div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"hco\">Hco :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeBranch($event.target.value)\"\n                                formControlName=\"hco\" id=\"hco\" [ngClass]=\"{\n                              'is-invalid': l.hco.invalid && l.hco.touched,\n                              'is-valid':\n                                l.hco.valid && (l.hco.dirty || l.hco.touched)\n                            }\">\n                                <option value=\"\">-- Select Hco --</option>\n                                <option *ngFor=\"let hco of hcoList\" value='{{hco.user_id}}'>\n                                    {{ hco.user_firstname}} {{hco.user_middlename}} {{hco.user_lastname}} -\n                                    {{hco.role_shortname}}\n                                </option>\n                            </select>\n                            <div *ngIf=\"l.hco.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"l.hco.errors.required\">Hco selection is required</div>\n                            </div>\n                        </div>\n                    </div>\n                    <!-- <div class=\"row\">\n                        <div class=\"form-group col-md\">\n                            <label for=\"block\">Block :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeBlock($event.target.value)\"\n                                formControlName=\"block\" id=\"block\" [ngClass]=\"{\n                              'is-invalid': l.block.invalid && l.block.touched,\n                              'is-valid':\n                                l.block.valid && (l.block.dirty || l.block.touched)\n                            }\">\n                                <option value=\"\">-- Select Block --</option>\n                                <option *ngFor=\"let block of villagesOfBranch\">\n                                    {{ block.blockName }}\n                                </option>\n                            </select>\n                            <div *ngIf=\"l.block.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"l.block.errors.required\">Block selection is required</div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"gp\">GP/ Municipality :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeGp($event.target.value)\" formControlName=\"gp\"\n                                id=\"gp\" [ngClass]=\"{\n                              'is-invalid': l.gp.invalid && l.gp.touched,\n                              'is-valid': l.gp.valid && (l.gp.dirty || l.gp.touched)\n                            }\">\n                                <option value=\"\">-- Select GP/ Municipality --</option>\n                                <option *ngFor=\"let gp of gpDtoList\">\n                                    {{ gp.name }}\n                                </option>\n                            </select>\n                            <div *ngIf=\"l.gp.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"l.gp.errors.required\">\n                                    GP selection is required\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"gram\">GS/ Ward/ Village:&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeVillage($event.target.value)\"\n                                formControlName=\"gram\" id=\"gram\" [ngClass]=\"{\n                              'is-invalid': l.gram.invalid && l.gram.touched,\n                              'is-valid': l.gram.valid && (l.gram.dirty || l.gram.touched)\n                            }\">\n                                <option value=\"\">-- Select Village --</option>\n                                <option *ngFor=\"let vill of villageDtoList\">\n                                    {{ vill.villageName }}\n                                </option>\n                            </select>\n                            <div *ngIf=\"l.gram.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"l.gram.errors.required\">\n                                    Village selection is required\n                                </div>\n                            </div>\n                        </div>\n                    </div> -->\n\n                    <div class=\"row\">\n                        <div class=\"form-group col-md\">\n                            <label for=\"fromDate\">From Date :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <input type=\"date\" class=\"form-control\" formControlName=\"fromDate\"\n                                (keydown)=\"restrictTypeOfDate()\" [ngClass]=\"{\n                                    'is-invalid': l.fromDate.invalid && l.fromDate.touched,\n                                    'is-valid':\n                                      l.fromDate.valid && (l.fromDate.dirty || l.fromDate.touched)\n                                  }\">\n                            <div *ngIf=\"l.fromDate.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"l.fromDate.errors.required\">From Date selection is required</div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"toDate\">To Date :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <input type=\"date\" class=\"form-control\" formControlName=\"toDate\"\n                                (keydown)=\"restrictTypeOfDate()\" (change)=\"viewDAREntryList()\" [ngClass]=\"{\n                                    'is-invalid': l.toDate.invalid && l.toDate.touched,\n                                    'is-valid':\n                                      l.toDate.valid && (l.toDate.dirty || l.toDate.touched)\n                                  }\">\n                            <div *ngIf=\"l.toDate.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"l.toDate.errors.required\">To Date selection is required</div>\n                            </div>\n\n                        </div>\n                    </div>\n                    <div class=\"white_box_tittle list_header\">\n\n                        <div class=\"QA_table \">\n                            <div id=\"DataTables_Table_0_wrapper\" class=\"dataTables_wrapper no-footer\">\n                                <table\n                                    class=\"table lms_table_active dataTable no-footer dtr-inline collapsed table table-striped\"\n                                    role=\"grid\" aria-describedby=\"DataTables_Table_0_info\" style=\"table-layout: fixed;\">\n\n                                    <thead id=\"header-fixed\">\n                                        <tr>\n                                            <th>SL<br>No</th>\n                                            <th>Date</th>\n                                            <th>View</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n\n                                        <tr\n                                            *ngFor=\"let item of darList | paginate: { itemsPerPage: 5, currentPage: p } ; index as i\">\n                                            <td>{{(p-1)*5+i+1 ? (p-1)*5+i+1 : i+1}}</td>\n                                            <td>{{item.darDate}} </td>\n                                            <td (click)=\"darViewFamily(item.darViewFamilyDTOList)\"><i\n                                                    class=\"fas fa-angle-right\"></i></td>\n                                        </tr>\n\n                                        <!-- <tr  *ngIf=\"(baselineDetails | filter : registerSearch)?.length == 0\">\n                                                    <td colspan=\"7\">No matching household info found</td>\n        \n                                                </tr> -->\n                                    </tbody>\n\n                                </table>\n                                <pagination-controls class=\"d-flex justify-content-end p-1 current ngx-pagination1\"\n                                    (pageChange)=\"p = $event\" (pageBoundsCorrection)=\"p = $event \">\n                                </pagination-controls>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"white_box_tittle list_header\">\n\n                        <div class=\"QA_table \">\n                            <div id=\"DataTables_Table_0_wrapper\" class=\"dataTables_wrapper no-footer\">\n                                <table\n                                    class=\"table lms_table_active dataTable no-footer dtr-inline collapsed table table-striped\"\n                                    role=\"grid\" aria-describedby=\"DataTables_Table_0_info\" style=\"table-layout: fixed;\">\n\n                                    <thead id=\"header-fixed\">\n                                        <tr>\n                                            <th>SL<br>No</th>\n                                            <th>Village</th>\n                                            <th>Name of <br> Beneficiary Visited</th>\n                                            <th>Type of <br> beneficiary</th>\n                                            <th>Alone /<br> With SS</th>\n                                            <th>Name of SS </th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n\n                                        <tr\n                                            *ngFor=\"let item of darViewFamilyList | paginate: { itemsPerPage: 5, currentPage: p } ; index as i\">\n                                            <td>{{(p-1)*5+i+1 ? (p-1)*5+i+1 : i+1}}</td>\n                                            <td>{{item.villageName}} </td>\n                                            <td>{{item.firstName}} {{item.middleName}} {{item.lastName}}</td>\n                                            <td> -</td>\n                                            <td>{{item.visitedWithSS}}</td>\n                                            <td>{{item.ssName}}</td>\n                                        </tr>\n\n                                        <!-- <tr  *ngIf=\"(baselineDetails | filter : registerSearch)?.length == 0\">\n                                                    <td colspan=\"7\">No matching household info found</td>\n        \n                                                </tr> -->\n                                    </tbody>\n\n                                </table>\n                                <pagination-controls class=\"d-flex justify-content-end p-1 current ngx-pagination1\"\n                                    (pageChange)=\"p = $event\" (pageBoundsCorrection)=\"p = $event \">\n                                </pagination-controls>\n\n                            </div>\n                        </div>\n                    </div>\n\n                </form>\n\n            </div>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DailyActivityRegisterComponent } from './daily-activity-register.component';\n\nconst routes: Routes = [{ path: '', component: DailyActivityRegisterComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DailyActivityRegisterRoutingModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DailyActivityRegisterService {\n  baseURL = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n  villagesOfBranch(obj): any {\n    return this.http.post(`${this.baseURL}village/getVillagesOfABranch`, obj)\n  }\n\n  listOfBranchesOfARegion(obj): any {\n    return this.http.post(`${this.baseURL}branch/getListOfBranchesOfARegion`, obj)\n  }\n\n  hcoListOfBranch(obj): any {\n    return this.http.post(`${this.baseURL}branch/getListOfHcoITL`, obj)\n  }\n\n  viewingDAREntryList(obj): any {\n    return this.http.post(`${this.baseURL}dailyActivity/viewDailyActivityRegister`, obj)\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DailyActivityRegisterRoutingModule } from './daily-activity-register-routing.module';\nimport { DailyActivityRegisterComponent } from './daily-activity-register.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\n\n@NgModule({\n  declarations: [DailyActivityRegisterComponent],\n  imports: [\n    CommonModule,\n    DailyActivityRegisterRoutingModule,\n    ReactiveFormsModule,\n    Ng2SearchPipeModule,\n    NgxPaginationModule\n  ]\n})\nexport class DailyActivityRegisterModule { }\n"],"sourceRoot":"webpack:///"}