{"version":3,"sources":["./src/app/modules/gp-setup/gp-home/gp-home.component.ts","./src/app/modules/gp-setup/gp-home/gp-home.component.html","./src/app/modules/gp-setup/gp-setup-routing.module.ts","./src/app/modules/gp-setup/gp-setup-form/gp-setup-form.component.ts","./src/app/modules/gp-setup/gp-setup-form/gp-setup-form.component.html","./src/app/modules/gp-setup/gp-setup.module.ts"],"names":[],"mappings":"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","file":"modules-gp-setup-gp-setup-module.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { BaselineSurveyService } from '../../baseline-survey/baseline-survey.service';\r\nimport { HttpService } from '../../core/http/http.service';\r\nimport { ConfirmationDialogService } from '../../shared/confirmation-dialog/confirmation-dialog.service';\r\nimport { GpSetupFormComponent } from '../gp-setup-form/gp-setup-form.component';\r\n\r\n@Component({\r\n  selector: 'app-gp-home',\r\n  templateUrl: './gp-home.component.html',\r\n  styleUrls: ['./gp-home.component.css']\r\n})\r\nexport class GpHomeComponent implements OnInit {\r\n  stateSelectForm: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder, private httpService: HttpService,\r\n    private http: HttpClient, private baselineService: BaselineSurveyService, private toaster: ToastrService,\r\n    private confirmationDialogService: ConfirmationDialogService, public dialog: MatDialog,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createForm();\r\n  }\r\n\r\n  openCreateBlock() {\r\n    const dialogRef = this.dialog.open(GpSetupFormComponent, {\r\n      width: '500px',\r\n      height: '350px',\r\n      data: {}\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n    });\r\n  }\r\n\r\n  openEditBlock() {\r\n    const dialogRef = this.dialog.open(GpSetupFormComponent, {\r\n      width: '530px',\r\n      height: '350px',\r\n      data: {}\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n    });\r\n  }\r\n\r\n  createForm() {\r\n    this.stateSelectForm = this.fb.group({\r\n      state: ['', Validators.required],\r\n      district: ['', Validators.required],\r\n      block: ['', Validators.required],\r\n    });\r\n  }\r\n  get f() {\r\n    return this.stateSelectForm.controls;\r\n  }\r\n\r\n  changeState(value) {\r\n\r\n  }\r\n  changeDistrict(value) {\r\n\r\n  }\r\n  changeBlock(value) {\r\n\r\n  }\r\n\r\n  onDelete() {\r\n    this.confirmationDialogService.confirm('', 'Do you want to delete ?').then(() => {\r\n      // this.http.post(`${this.httpService.baseURL}acr/muac/saveOrUpdate`, Dto).subscribe((res) => {\r\n\r\n      // })\r\n    }).catch(() => '');\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"white_box QA_section mb_30\">\r\n\r\n          <div id=\"header-fixed\" style=\"display: flex;\">\r\n            <h2 class=\"page-title\">GP/Municipality  Setup</h2>\r\n        </div>\r\n        \r\n        <div class=\"add_button\">\r\n            <button class=\"btn btn-primary\" (click)=\"openCreateBlock()\">\r\n                <i class=\"fa fa-building-o\"></i>Create GP/Municipality\r\n            </button>    \r\n        </div>\r\n<br>\r\n        <form class=\"form-signin\" [formGroup]=\"stateSelectForm\">\r\n            <div class=\"row\">\r\n              <div class=\"form-group col-md-4\">\r\n                <label for=\"state\"\r\n                  >State :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label\r\n                >\r\n                <select\r\n                  class=\"form-select\"\r\n                  (change)=\"changeState($event.target.value)\"\r\n                  formControlName=\"state\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid': f.state.invalid && f.state.touched,\r\n                    'is-valid': f.state.valid && (f.state.dirty || f.state.touched)\r\n                  }\"\r\n                >\r\n                  <option value=\"\">-- Select State --</option>\r\n                  <!-- <option *ngFor=\"let state of stateList\">\r\n                    {{state.stateName}}\r\n                  </option> -->\r\n                </select>\r\n                <div *ngIf=\"f.state.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f.state.errors.required\">\r\n                    State selection is required\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-group col-md-4\">\r\n                <label for=\"district\"\r\n                  >District :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label\r\n                >\r\n                <select\r\n                  class=\"form-select\"\r\n                  (change)=\"changeDistrict($event.target.value)\"\r\n                  formControlName=\"district\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid': f.district.invalid && f.district.touched,\r\n                    'is-valid': f.district.valid && (f.district.dirty || f.district.touched)\r\n                  }\"\r\n                >\r\n                  <option value=\"\">-- Select District --</option>\r\n                  <!-- <option *ngFor=\"let state of stateList\">\r\n                    {{state.stateName}}\r\n                  </option> -->\r\n                </select>\r\n                <div *ngIf=\"f.district.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f.district.errors.required\">\r\n                    District selection is required\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-group col-md-4\">\r\n                <label for=\"block\"\r\n                  >Block :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label\r\n                >\r\n                <select\r\n                  class=\"form-select\"\r\n                  (change)=\"changeBlock($event.target.value)\"\r\n                  formControlName=\"block\"\r\n                  [ngClass]=\"{\r\n                    'is-invalid': f.block.invalid && f.block.touched,\r\n                    'is-valid': f.block.valid && (f.block.dirty || f.block.touched)\r\n                  }\"\r\n                >\r\n                  <option value=\"\">-- Select Block --</option>\r\n                  <!-- <option *ngFor=\"let state of stateList\">\r\n                    {{state.stateName}}\r\n                  </option> -->\r\n                </select>\r\n                <div *ngIf=\"f.block.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f.block.errors.required\">\r\n                    Block selection is required\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </form>\r\n\r\n        <div class=\"white_box_tittle list_header\" >\r\n            <div class=\"QA_table \">\r\n                <div id=\"DataTables_Table_0_wrapper\" class=\"dataTables_wrapper no-footer\">\r\n                    <table\r\n                        class=\"table lms_table_active dataTable no-footer dtr-inline collapsed table table-striped\"\r\n                        role=\"grid\" aria-describedby=\"DataTables_Table_0_info\" style=\"table-layout: fixed;\">\r\n        \r\n                        <thead>\r\n                            <tr>\r\n                                <th>SL<br>No</th>\r\n                                <th>State</th>\r\n                                <th>District</th>\r\n                                <th>Block Name</th>\r\n                                <th>GP/Municipality</th>\r\n                                <th>Type</th> \r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n        \r\n                        <tbody>\r\n        \r\n                            <tr>\r\n                                <td>1</td>\r\n                                <td>State 1</td>\r\n                                <td>\r\n                                    District 1\r\n                                </td>\r\n                                <td>\r\n                                    Onda\r\n                                </td>\r\n                                <td>\r\n                                    GP 1\r\n                                </td>\r\n                                <td>\r\n                                    New\r\n                                </td>\r\n                                <td>\r\n                                    <i class=\"fas fa-edit\" title=\"Edit\" (click)=\"openEditBlock()\"></i>\r\n                                    <i class=\"fas fa-trash\" title=\"Delete MUAC\" (click)=\"onDelete()\"></i>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { GpHomeComponent } from './gp-home/gp-home.component';\r\n\r\nconst routes: Routes = [{ path: '', component: GpHomeComponent },];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class GpSetupRoutingModule { }\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { HttpService } from '../../core/http/http.service';\r\n\r\n@Component({\r\n  selector: 'app-gp-setup-form',\r\n  templateUrl: './gp-setup-form.component.html',\r\n  styleUrls: ['./gp-setup-form.component.css']\r\n})\r\nexport class GpSetupFormComponent implements OnInit {\r\n  blockForm: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder, private http: HttpClient, private toaster: ToastrService, private httpService: HttpService,\r\n    @Inject(MAT_DIALOG_DATA) public data: any, public dialogRef: MatDialogRef<GpSetupFormComponent>) {\r\n    dialogRef.disableClose = true;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createForm();\r\n  }\r\n\r\n  createForm() {\r\n    this.blockForm = this.fb.group({\r\n      state: ['', Validators.required],\r\n      district: ['', Validators.required],\r\n      block: ['', Validators.required],\r\n      gpName: ['', Validators.required],\r\n      type: ['', Validators.required],\r\n    });\r\n  }\r\n  get f() {\r\n    return this.blockForm.controls;\r\n  }\r\n\r\n  changeState(value) {\r\n\r\n  }\r\n  changeDistrict(value) {\r\n\r\n  }\r\n\r\n  onSave() { }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<h1 mat-dialog-title>\r\n    <div class=\"dialog-header\">\r\n      <h2 class=\"dialog-title\">Create New Block</h2>\r\n      <div><i class=\"fas fa-times\" (click)=\"closeDialog()\"></i></div>\r\n    </div>\r\n  </h1>\r\n  \r\n  <div mat-dialog-content>\r\n    <form class=\"form-signin\" [formGroup]=\"blockForm\">\r\n      <div class=\"row\">\r\n        <div class=\"form-group col-md\">\r\n          <label for=\"state\"\r\n            >State :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label\r\n          >\r\n          <select\r\n            class=\"form-select\"\r\n            (change)=\"changeState($event.target.value)\"\r\n            formControlName=\"state\"\r\n            [ngClass]=\"{\r\n              'is-invalid': f.state.invalid && f.state.touched,\r\n              'is-valid': f.state.valid && (f.state.dirty || f.state.touched)\r\n            }\"\r\n          >\r\n            <option value=\"\">-- Select State --</option>\r\n            <!-- <option *ngFor=\"let state of stateList\">\r\n                    {{state.stateName}}\r\n                  </option> -->\r\n          </select>\r\n          <div *ngIf=\"f.state.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.state.errors.required\">State selection is required</div>\r\n          </div>\r\n        </div>\r\n  \r\n        <div class=\"form-group col-md\">\r\n          <label for=\"district\"\r\n            >District :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label\r\n          >\r\n          <select\r\n            class=\"form-select\"\r\n            (change)=\"changeDistrict($event.target.value)\"\r\n            formControlName=\"district\"\r\n            [ngClass]=\"{\r\n              'is-invalid': f.district.invalid && f.district.touched,\r\n              'is-valid':\r\n                f.district.valid && (f.district.dirty || f.district.touched)\r\n            }\"\r\n          >\r\n            <option value=\"\">-- Select District --</option>\r\n            <!-- <option *ngFor=\"let state of stateList\">\r\n                    {{state.stateName}}\r\n                  </option> -->\r\n          </select>\r\n          <div *ngIf=\"f.state.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.state.errors.required\">\r\n              District selection is required\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group col-md-4\">\r\n            <label for=\"block\"\r\n              >Block :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label\r\n            >\r\n            <select\r\n              class=\"form-select\"\r\n              formControlName=\"block\"\r\n              [ngClass]=\"{\r\n                'is-invalid': f.block.invalid && f.block.touched,\r\n                'is-valid': f.block.valid && (f.block.dirty || f.block.touched)\r\n              }\"\r\n            >\r\n              <option value=\"\">-- Select Block --</option>\r\n              <!-- <option *ngFor=\"let state of stateList\">\r\n                {{state.stateName}}\r\n              </option> -->\r\n            </select>\r\n            <div *ngIf=\"f.block.errors\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"f.block.errors.required\">\r\n                Block selection is required\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </div>\r\n      <br />\r\n      <div class=\"row\">\r\n        <div class=\"form-group col-md\">\r\n          <label for=\"gpName\"\r\n            >gp Name :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label\r\n          >\r\n          <input\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            placeholder=\"Enter gp Name\"\r\n            formControlName=\"gpName\"\r\n            [ngClass]=\"{\r\n              'is-invalid': f.gpName.invalid && f.gpName.touched,\r\n              'is-valid':\r\n                f.gpName.valid && (f.gpName.dirty || f.gpName.touched)\r\n            }\"\r\n          />\r\n          <div *ngIf=\"f.gpName.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.gpName.errors.required\">gp Name is required</div>\r\n          </div>\r\n        </div>\r\n  \r\n        <div class=\"form-group col-md\">\r\n          <label for=\"type\"\r\n            >Type :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label\r\n          >\r\n          <input\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            placeholder=\"Enter Type\"\r\n            formControlName=\"type\"\r\n            [ngClass]=\"{\r\n              'is-invalid': f.type.invalid && f.type.touched,\r\n              'is-valid':\r\n                f.type.valid && (f.type.dirty || f.type.touched)\r\n            }\"\r\n          />\r\n          <div *ngIf=\"f.type.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.type.errors.required\">Type is required</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  \r\n  <div mat-dialog-actions>\r\n    <button type=\"submit\" class=\"btn btn-success\" (click)=\"onSave()\">Save</button>\r\n  </div>\r\n  ","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { GpSetupRoutingModule } from './gp-setup-routing.module';\r\nimport { GpHomeComponent } from './gp-home/gp-home.component';\r\nimport { GpSetupFormComponent } from './gp-setup-form/gp-setup-form.component';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\n\r\n@NgModule({\r\n  declarations: [GpHomeComponent, GpSetupFormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    GpSetupRoutingModule, ReactiveFormsModule, FormsModule,\r\n    MatTabsModule, MatNativeDateModule, MatDialogModule, MatMenuModule,\r\n    MatIconModule\r\n  ]\r\n})\r\nexport class GpSetupModule { }\r\n"],"sourceRoot":"webpack:///"}