{"version":3,"sources":["./src/app/modules/role-access/role-access.component.ts","./src/app/modules/role-access/role-access.component.html","./src/app/modules/role-access/role-access-routing.module.ts","./src/app/modules/core/http/http.service.ts","./src/app/modules/role-access/role-access.module.ts","./src/app/modules/role-access/role-access.service.ts"],"names":[],"mappings":"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","file":"modules-role-access-role-access-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nimport { HttpService } from 'src/app/modules/core/http/http.service';\r\nimport { DataAccessDTO } from '../core/models/dataAccessDTO.model';\r\nimport { MainFunctionDTO } from '../core/models/mainFunctionDTO.model';\r\nimport { RoleMasterDTO } from '../core/models/roleMasterDTO.model';\r\nimport { RoleFunctionMapDTO } from '../core/models/roleSubFunctionMapDTO.model';\r\nimport { SubFunctionMasterDTO } from '../core/models/subFunctionDTO.model';\r\nimport { RoleAccessService } from './role-access.service';\r\n\r\n@Component({\r\n  selector: 'app-role-access',\r\n  templateUrl: './role-access.component.html',\r\n  styleUrls: ['./role-access.component.css']\r\n})\r\nexport class RoleAccessComponent implements OnInit {\r\n  roleAccessForm: FormGroup;\r\n  roleList: Array<any> = [];\r\n  mainFunctionList: Array<any> = [];\r\n  subFunctionList: any = [];\r\n  accessType: any;\r\n  // main_functions: MainFunctionDTO[];\r\n  // mainFunctionId: any = '';\r\n  // subFunctions: SubFunctionMasterDTO[];\r\n  subFunctions: any;\r\n  // subFunctionsDropDown: any = [];\r\n  // selectedSubFunction: string = ''\r\n  // actionTypes: any = [];\r\n  RoleList: RoleMasterDTO[];\r\n  roleAccessData: RoleFunctionMapDTO[];\r\n  // roleAccessSaveObj: {\r\n  //   dataAccessDTO: DataAccessDTO,\r\n  //   roleFunctionMapDTOList: RoleFunctionMapDTO[];\r\n  // }\r\n\r\n  // abcd: string;\r\n  constructor(private httpService: HttpService, private route: ActivatedRoute, private roleService: RoleAccessService,\r\n    private fb: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createForm();\r\n\r\n    // Api call for viewing rolefunctionmapview list\r\n    let obj = { dataAccessDTO: this.httpService.dataAccessDTO }\r\n    this.roleService.rolefunctionmapview(obj).subscribe((res) => {\r\n      this.roleList = res.responseObject;\r\n      console.log(this.roleList, ' this.roleList');\r\n    });\r\n\r\n    // this.route.data.subscribe(data => {\r\n    //   // this.menuData = data;\r\n    //   console.log(data);\r\n      this.roleAccessData =  this.roleList;\r\n    //   console.log(this.roleAccessData);\r\n      this.RoleList =  this.roleList.map(item => item.roleMasterDTO);\r\n      console.log(this.RoleList);\r\n      \r\n    //   this.main_functions = this.roleAccessData[0].mainFunctionDTOList\r\n    // });\r\n\r\n  }\r\n  createForm() {\r\n    this.roleAccessForm = this.fb.group({\r\n      role: ['', Validators.required],\r\n      mainfunction: ['', Validators.required],\r\n      subfunction: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.roleAccessForm.controls;\r\n  }\r\n\r\n  changeRole(roleId) {\r\n    console.log(roleId);\r\n    this.mainFunctionList = this.roleList.find(item => item.roleMasterDTO.roleMasterId == roleId)?.mainFunctionDTOList;\r\n    console.log(this.mainFunctionList, 'mainFunctionList');\r\n  }\r\n\r\n  changeMainFunction(mainFunctionId) {\r\n    console.log(mainFunctionId);\r\n    this.subFunctions = this.mainFunctionList.find(item => item.mainFunctionMasterId == mainFunctionId)?.subFunctionMasterDTOList;\r\n\r\n    this.subFunctionList = new Set(this.subFunctions.map(item => item.subFunctionShortName));\r\n    console.log(this.subFunctionList, this.subFunctions, 'subFunctionList');\r\n  }\r\n\r\n  changeSubFunction(subFunctionName) {\r\n    console.log(subFunctionName);\r\n\r\n    this.accessType = this.subFunctions.filter(item => item.subFunctionShortName == subFunctionName);\r\n    console.log(this.accessType);\r\n\r\n\r\n    //   this.actionTypes = this.subFunctions.filter(item => item.subFunctionShortName === this.selectedSubFunction)\r\n    //   console.log(this.actionTypes);\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  // getSubFunctions() {\r\n\r\n  //   this.subFunctions = this.roleAccessData[0].mainFunctionDTOList.find(item => item.mainFunctionMasterId === this.mainFunctionId).subFunctionMasterDTOList;\r\n\r\n  //   this.subFunctionsDropDown = new Set(this.subFunctions.map(item => item.subFunctionShortName));\r\n\r\n  // }\r\n\r\n  // createTableRows() {\r\n\r\n  //   this.actionTypes = this.subFunctions.filter(item => item.subFunctionShortName === this.selectedSubFunction)\r\n  //   console.log(this.actionTypes);\r\n  // }\r\n\r\n  // assignAccess(subFunctionId, roleIndex, event) {\r\n  //   let checked = event.target.checked;\r\n  //   let item = this.roleAccessData[roleIndex].mainFunctionDTOList.find(\r\n  //     item => item.mainFunctionMasterId === this.mainFunctionId\r\n  //   ).subFunctionMasterDTOList.find(item => item.subFunctionMasterId === subFunctionId)\r\n\r\n  //   if (checked)\r\n  //     item.roleActiveFlag = 'Y'\r\n  //   else\r\n  //     item.roleActiveFlag = 'N'\r\n\r\n  //   // console.log(item);\r\n  //   console.log(this.roleAccessData);\r\n\r\n  // }\r\n\r\n  // checkStatus(subFunctionId, roleIndex): any {\r\n  //   let flag = this.roleAccessData[roleIndex].mainFunctionDTOList.find(\r\n  //     item => item.mainFunctionMasterId === this.mainFunctionId\r\n  //   ).subFunctionMasterDTOList.find(item => item.subFunctionMasterId === subFunctionId).roleActiveFlag\r\n\r\n  //   // console.log(flag);\r\n  //   if (flag === 'Y')\r\n  //     return true\r\n\r\n  //   else\r\n  //     return false\r\n\r\n  // }\r\n\r\n  // save() {\r\n  //   this.roleAccessSaveObj = {\r\n  //     dataAccessDTO: this.httpService.dataAccessDTO,\r\n  //     roleFunctionMapDTOList: this.roleAccessData\r\n  //   };\r\n\r\n  //   console.log(this.roleAccessSaveObj);\r\n  //   this.httpService.postRequest(`rolesubfunctionmap/save`, this.roleAccessSaveObj).subscribe((data) => {\r\n  //     console.log(data)\r\n  //   },\r\n\r\n  //     (error) => {\r\n  //       console.log(error);\r\n  //     })\r\n  // }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"white_box QA_section mb_30\">\r\n\r\n                <div id=\"header-fixed\" style=\"display: flex;\">\r\n                    <h2 class=\"page-title\">Role Menu Map</h2>\r\n                </div>\r\n\r\n                <form class=\"form-signin\" [formGroup]=\"roleAccessForm\">\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"form-group col-md\">\r\n                            <label for=\"role\">Role :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\r\n                            <select class=\"form-select\" (change)=\"changeRole($event.target.value)\"\r\n                                formControlName=\"role\" id=\"role\" [ngClass]=\"{ 'is-invalid': f.role.invalid && f.role.touched, \r\n                                'is-valid': f.role.valid && (f.role.dirty || f.role.touched)}\">\r\n                                <option value=\"\">-- Select Role --</option>\r\n                                <option *ngFor=\"let role of roleList\" value=\"{{role.roleMasterDTO.roleMasterId}}\">\r\n                                    {{role.roleMasterDTO.roleDescription}}\r\n                                </option>\r\n                            </select>\r\n                            <div *ngIf=\"f.role.errors\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"f.role.errors.required\">Role selection is required</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group col-md\">\r\n                            <label for=\"mainfunction\">Main Function :&nbsp;<span\r\n                                    class=\"text-danger\">*&nbsp;</span></label>\r\n                            <select class=\"form-select\" (change)=\"changeMainFunction($event.target.value)\"\r\n                                formControlName=\"mainfunction\" id=\"mainfunction\" [ngClass]=\"{ 'is-invalid': f.mainfunction.invalid && f.mainfunction.touched, \r\n                                'is-valid': f.mainfunction.valid && (f.mainfunction.dirty || f.mainfunction.touched)}\">\r\n                                <option value=\"\">-- Select Main Function --</option>\r\n                                <option *ngFor=\"let mainfunction of mainFunctionList\"\r\n                                    value=\"{{mainfunction.mainFunctionMasterId}}\">\r\n                                    {{mainfunction.mainFunctionName}}\r\n                                </option>\r\n                            </select>\r\n                            <div *ngIf=\"f.mainfunction.errors\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"f.mainfunction.errors.required\">Main Function selection is required</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group col-md\">\r\n                            <label for=\"subfunction\">Sub Function :&nbsp;<span\r\n                                    class=\"text-danger\">*&nbsp;</span></label>\r\n                            <select class=\"form-select\" (change)=\"changeSubFunction($event.target.value)\"\r\n                                formControlName=\"subfunction\" id=\"subfunction\" [ngClass]=\"{'is-invalid': f.subfunction.invalid && f.subfunction.touched,\r\n                              'is-valid': f.subfunction.valid && (f.subfunction.dirty || f.subfunction.touched)}\">\r\n                                <option value=\"\">-- Select Sub Function --</option>\r\n                                <option *ngFor=\"let subfunction of subFunctionList\" value=\"{{subfunction}}\">\r\n                                    {{subfunction}}\r\n                                </option>\r\n                            </select>\r\n                            <div *ngIf=\"f.subfunction.errors\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"f.subfunction.errors.required\">Sub Function selection is required</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"white_box_tittle list_header\">\r\n\r\n                        <div class=\"QA_table \">\r\n                            <div id=\"DataTables_Table_0_wrapper\" class=\"dataTables_wrapper no-footer\">\r\n                                <table\r\n                                    class=\"table lms_table_active dataTable no-footer dtr-inline collapsed table table-striped\"\r\n                                    role=\"grid\" aria-describedby=\"DataTables_Table_0_info\" style=\"table-layout: fixed\">\r\n\r\n                                    <thead id=\"header-fixed\">\r\n                                        <tr>\r\n                                            <!-- <th></th> -->\r\n                                            <th *ngFor=\"let item of roleAccessData\">\r\n                                                {{item.roleMasterDTO.roleDescription}}</th>\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        <tr *ngFor=\"let action_item of accessType; index as i\">\r\n                                            <td>{{action_item.accessType.charAt(0).toUpperCase() +\r\n                                                action_item.accessType.substring(1)}}\r\n                                            </td>\r\n                                            <!-- <td *ngFor=\"let role_item of roleAccessData; index as role_index\">\r\n                                                <label class=\"primary_checkbox d-flex mr-12 \">\r\n                                                    <input type=\"checkbox\" [checked]=\"checkStatus(\r\n                                                            action_item.subFunctionMasterId, role_index)\" (change)=\"assignAccess(\r\n                                                            action_item.subFunctionMasterId, role_index, $event)\">\r\n                                                    <span class=\"checkmark\"></span>\r\n                                                </label>\r\n\r\n                                            </td> -->\r\n                                        </tr>\r\n                                    </tbody>\r\n\r\n                                </table>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n<!-- \r\n    \r\n    <label for=\"\" class=\"col-form-label\">Main Function: </label>\r\n</div>\r\n<div class=\"col-md-4\">\r\n    <select name=\"\" id=\"\" class=\"form-select\" (change)=\"getSubFunctions()\">\r\n        <option value=\"\">-- Main Function --</option>\r\n        <option [ngValue]=\"item.mainFunctionMasterId\" *ngFor=\"let item of roleAccessData[0].mainFunctionDTOList\">\r\n            {{item.mainFunctionName}}</option>\r\n    </select>\r\n</div>\r\n\r\n<div class=\"col\">\r\n    <label for=\"\" class=\"col-form-label\">Sub Function: </label>\r\n</div>\r\n<div class=\"col-md-4\">\r\n    <select name=\"\" id=\"\" class=\"form-select\" (change)=\"createTableRows()\">\r\n        <option value=\"\">-- Sub Function --</option>\r\n        <option [ngValue]=\"item\" *ngFor=\"let item of subFunctionsDropDown\">{{item}}</option>\r\n    </select>\r\n</div>\r\n</div>\r\n\r\n<div class=\"white_box_tittle list_header\">\r\n<div class=\"QA_table \">\r\n    <div class=\"dataTables_wrapper\">\r\n        <table class=\"table no-footer dtr-inline collapsed\" role=\"grid\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th *ngFor=\"let item of roleAccessData\">{{item.roleMasterDTO.roleDescription}}</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let action_item of actionTypes; index as i\">\r\n                    <td>{{action_item.accessType.charAt(0).toUpperCase() +\r\n                        action_item.accessType.substring(1)}}\r\n                    </td>\r\n                    <td *ngFor=\"let role_item of roleAccessData; index as role_index\">\r\n                        <label class=\"primary_checkbox d-flex mr-12 \">\r\n                            <input type=\"checkbox\" [checked]=\"checkStatus(\r\n                                    action_item.subFunctionMasterId, role_index)\" (change)=\"assignAccess(\r\n                                    action_item.subFunctionMasterId, role_index, $event)\">\r\n                            <span class=\"checkmark\"></span>\r\n                        </label>\r\n\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>\r\n</div>\r\n\r\n<div class=\"row\" *ngIf=\"selectedSubFunction\">\r\n<div class=\"col-md-4\">\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"save()\">Save</button>\r\n</div>\r\n</div> \r\n</div>-->","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RoleAccessComponent } from './role-access.component';\r\n\r\nconst routes: Routes = [{ path: '', component: RoleAccessComponent },];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class RoleAccessRoutingModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\r\nimport { Observable } from 'rxjs';\r\nimport { SidebarService } from '../../shared/sidebar/sidebar.service';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpService {\r\n  baseURL = environment.apiUrl;\r\n  headers = new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n    'Authorization': 'Basic dXNlcjE6c2VjcmV0MQ=='\r\n\r\n  })\r\n  testUrl = `http://192.168.149.221:8085/`;\r\n  dataAccessDTO = {\r\n    userId: this.sidebarService.userId,\r\n    userName: this.sidebarService.loginId,\r\n  }\r\n\r\n  dataAccessDTOO = {\r\n    userId: 5,\r\n    userName: 'BK000005'\r\n  }\r\n\r\n  constructor(private http: HttpClient, private sidebarService: SidebarService) { }\r\n\r\n  postRequest(url, body): Observable<any> {\r\n    return this.http.post(this.testUrl + url, body, { headers: this.headers })\r\n  }\r\n\r\n  getChildrenRegister(obj): any {\r\n    return this.http.post(`${this.baseURL}acr/view`, obj)\r\n  }\r\n\r\n  getLactatingMotherRegister(obj): any {\r\n    return this.http.post(`${this.baseURL}lactatingmotherregister/getVillageWiseChildDetails`, obj)\r\n  }\r\n  getPregnantWomenList(obj): any {\r\n    return this.http.post(`${this.baseURL}pwr/getVillageWisePregnantWomanDetails`, obj)\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { RoleAccessRoutingModule } from './role-access-routing.module';\r\nimport { RoleAccessComponent } from './role-access.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n  declarations: [RoleAccessComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RoleAccessRoutingModule,\r\n    ReactiveFormsModule\r\n  ]\r\n})\r\nexport class RoleAccessModule { }\r\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleAccessService {\n  baseURL = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n  rolefunctionmapview(obj): any {\n    return this.http.post(`${this.baseURL}rolemaster/rolefunctionmap/view`, obj)\n  }\n\n}\n"],"sourceRoot":"webpack:///"}