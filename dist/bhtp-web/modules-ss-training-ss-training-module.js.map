{"version":3,"sources":["./src/app/modules/ss-training/ss-training.module.ts","./src/app/modules/ss-training/ss-training-routing.module.ts","./src/app/modules/ss-training/ss-training.service.ts","./src/app/modules/ss-training/ss-training.component.ts","./src/app/modules/ss-training/ss-training.component.html"],"names":[],"mappings":"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","file":"modules-ss-training-ss-training-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SsTrainingRoutingModule } from './ss-training-routing.module';\nimport { SsTrainingComponent } from './ss-training.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [SsTrainingComponent],\n  imports: [\n    CommonModule,\n    SsTrainingRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class SsTrainingModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SsTrainingComponent } from './ss-training.component';\n\nconst routes: Routes = [{ path: '', component: SsTrainingComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SsTrainingRoutingModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SsTrainingService {\n  baseURL = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n  listOfBranchesOfARegion(obj): any {\n    return this.http.post(`${this.baseURL}branch/getListOfBranchesOfARegion`, obj)\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NgbModal, NgbModalConfig } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpService } from '../core/http/http.service';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { SsTrainingService } from './ss-training.service';\n\n@Component({\n  selector: 'app-ss-training',\n  templateUrl: './ss-training.component.html',\n  styleUrls: ['./ss-training.component.css']\n})\nexport class SsTrainingComponent implements OnInit {\n  ssTrainingForm: FormGroup;\n  ssTrainingScheduleForm: FormGroup;\n  regionList: Array<any> = [];\n  branchList: Array<any> = [];\n  villagesOfBranch: Array<any> = [];\n  regionBranchHide: boolean;\n  modalContent: any;\n  modalReference: any;\n\n  constructor(private fb: FormBuilder, private http: HttpClient, private sidebarService: SidebarService, private httpService: HttpService,\n    private ssTrainingService: SsTrainingService, private modalService: NgbModal, config: NgbModalConfig,) {\n    config.backdrop = 'static';\n    config.keyboard = false;\n  }\n\n  ngOnInit(): void {\n    this.createForm();\n\n    this.sidebarService.checkRoledetailDTO().then((res: any) => {\n      if (res.regionBranchHide) {\n        this.regionList = res.region;\n        this.regionBranchHide = res.regionBranchHide;\n      } else {\n        let dataAccessDTO = JSON.parse(localStorage.getItem('dataAccessDTO'));\n        let Dto = {\n          dataAccessDTO: {\n            userId: dataAccessDTO.userName,\n            userName: dataAccessDTO.userId,\n          },\n          branchId: res.branchId\n        }\n        this.regionBranchHide = res.regionBranchHide;\n        this.http.post(`${this.sidebarService.baseURL}village/getVillagesOfABranch`, Dto).subscribe((res: any) => {\n          if (res.sessionDTO.status == true) {\n            this.villagesOfBranch = res.responseObject;\n          }\n        });\n\n        // let Dato = {\n        //   dataAccessDTO: this.httpService.dataAccessDTO,\n        //   branchId: res.branchId\n        // }\n\n        // this.dailyActivityService.hcoListOfBranch(Dato).subscribe((res: any) => {\n        //   this.hcoList = res.responseObject;\n        //   console.log(this.hcoList, 'hcoList');\n        // });\n      }\n    });\n  }\n\n  createForm() {\n    this.ssTrainingForm = this.fb.group({\n      region: ['', Validators.required],\n      branch: ['', Validators.required],\n\n    });\n  }\n\n  get l() {\n    return this.ssTrainingForm.controls;\n  }\n\n\n  changeRegion(regionId) {\n    console.log(regionId);\n\n    let req = {\n      dataAccessDTO: this.httpService.dataAccessDTO,\n      regionId: regionId,\n    };\n\n    this.ssTrainingService.listOfBranchesOfARegion(req).subscribe((res) => {\n      this.branchList = res.responseObject;\n      console.log(this.branchList);\n\n    });\n\n    // this.locationForm.controls.branch.setValue('');\n    // this.locationForm.controls.hco.setValue('');\n    // this.locationForm.controls.fromDate.setValue('');\n    // this.locationForm.controls.toDate.setValue('');\n    // this.darList = [];\n    // this.darViewFamilyList = [];\n    // this.branchList = [];\n    // this.hcoList = [];\n    // if (this.locationForm.value.region == '') {\n    //   this.locationForm.controls.hco.setValue('');\n    //   this.locationForm.controls.fromDate.setValue('');\n    //   this.locationForm.controls.toDate.setValue('');\n    //   this.darList = [];\n    //   this.darViewFamilyList = [];\n    //   this.branchList = [];\n    //   this.hcoList = [];\n    //   this.showError('No Data Found');\n    // }\n  }\n\n  changeBranch(branchId) {\n    console.log(branchId);\n\n  }\n\n  createSSTrainingEvent(SSTraining) {\n    // console.log(this.villageId, 'villge idcreate');\n    this.modalContent = '';\n    this.modalReference = this.modalService.open(SSTraining, {\n      windowClass: 'SSTraining',\n    });\n    this.ssTrainingFormModal();\n  }\n\n  ssTrainingFormModal() {\n    this.ssTrainingScheduleForm = this.fb.group({\n      trainingType: ['', Validators.required],\n      duration: ['', Validators.required],\n      trainername: ['', Validators.required],\n      trainerdesignation: ['', Validators.required],\n      trainingtopic: ['', Validators.required],\n\n\n\n\n    });\n  }\n\n  get t() {\n    return this.ssTrainingScheduleForm.controls;\n  }\n\n\n\n  ssTrainingModalDismiss() {\n    // console.log(this.villageId);\n\n    // if (this.villageId) {\n    //   this.editVillData = [];\n    //   this.villageId = 0;\n    //   this.modalReference?.close();\n    // }\n    // else {\n    this.modalReference?.close();\n    // }\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"white_box QA_section mb_30\">\n                <h2 class=\"page-title\">Swasthya Sahayika Training</h2>\n                <div class=\"row\">\n                    <div class=\"form-group col-md\" style=\"display: flex; justify-content:flex-end\">\n                        <button class=\"btn btn-primary\" (click)=\"createSSTrainingEvent(SSTraining)\">Create</button>\n                    </div>\n                </div>\n\n                <form class=\"form-signin\" [formGroup]=\"ssTrainingForm\">\n\n                    <div class=\"row\" *ngIf=\"regionBranchHide\">\n                        <div class=\"form-group col-md\">\n                            <label for=\"region\">Region :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeRegion($event.target.value)\"\n                                formControlName=\"region\" id=\"region\" [ngClass]=\"{'is-invalid': l.region.invalid && l.region.touched,\n                              'is-valid': l.region.valid && (l.region.dirty || l.region.touched) }\">\n                                <option value=\"\">-- Select Region --</option>\n                                <option *ngFor=\"let region of regionList\" value=\"{{region.regionMasterId}}\">\n                                    {{region.regionName}}\n                                </option>\n                            </select>\n                            <div *ngIf=\"l.region.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"l.region.errors.required\">Region selection is required</div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"branch\">Branch :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeBranch($event.target.value)\"\n                                formControlName=\"branch\" id=\"branch\" [ngClass]=\"{ 'is-invalid': l.branch.invalid && l.branch.touched,\n                              'is-valid': l.branch.valid && (l.branch.dirty || l.branch.touched) }\">\n                                <option value=\"\">-- Select Branch --</option>\n                                <option *ngFor=\"let branch of branchList\" value=\"{{branch.branchId}}\">\n                                    {{ branch.branchName }}\n                                </option>\n                            </select>\n                            <div *ngIf=\"l.branch.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"l.branch.errors.required\">Branch selection is required</div>\n                            </div>\n                        </div>\n\n                    </div>\n                </form>\n            </div>\n        </div>\n\n    </div>\n</div>\n\n<ng-template #SSTraining>\n\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n\n            <div class=\"row\">\n                <div class=\"col-md-7\">\n                    <h3 class=\"modal-title\" id=\"modal-basic-title\">Schedule SS Training</h3>\n                    <!-- <h3 class=\"modal-title\" id=\"modal-basic-title\" *ngIf=\"villageId\">Edit Village</h3> -->\n                </div>\n\n                <div class=\"col-md-2\">\n                    <span class=\"close\" (click)=\"ssTrainingModalDismiss()\"\n                        style=\"cursor: pointer;font-size: 35px;\">&times;</span>\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\"modal-body\">\n            <form class=\"form-signin\" [formGroup]=\"ssTrainingScheduleForm\">\n                <div class=\"row\">\n                    <div class=\"form-group col-md\">\n                        <label for=\"trainingType\">Type of Training :&nbsp;<span\n                                class=\"text-danger\">*&nbsp;</span></label>\n                        <!-- (change)=\"TrainingType($event.target.value)\" -->\n                        <select class=\"form-select\" formControlName=\"trainingType\" id=\"trainingType\" [ngClass]=\"{'is-invalid': t.trainingType.invalid && t.trainingType.touched,\n                          'is-valid': t.trainingType.valid && (t.trainingType.dirty || t.trainingType.touched) }\">\n                            <option value=\"\">-- Select Training Type --</option>\n                            <!-- <option *ngFor=\"let trainingType of trainingTypeList\" value=\"{{trainingType.regionMasterId}}\">\n                                {{region.regionName}}\n                            </option> -->\n                        </select>\n                        <div *ngIf=\"t.trainingType.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"t.trainingType.errors.required\">trainingType selection is required</div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group col-md\">\n                        <label for=\"duration\">Duration:&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                        <input type=\"text\" class=\"form-control\" placeholder=\"duration \" formControlName=\"duration\"\n                            maxlength=\"45\" style=\"text-transform: capitalize\" [ngClass]=\"{'is-invalid': t.duration.invalid && t.duration.touched,'is-valid': t.duration.valid && \n                            (t.duration.dirty || t.duration.touched)}\" />\n                        <div *ngIf=\"t.duration.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"t.duration.errors.required\">\n                                duration Name is required\n                            </div>\n                            <div *ngIf=\"t.duration.errors.minlength\">\n                                Minimum length should be 3\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"form-group col-md\">\n                        <label for=\"trainername\">Trainer Name:&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                        <input type=\"text\" class=\"form-control\" placeholder=\"Trainer Name\" formControlName=\"trainername\"\n                            maxlength=\"45\" style=\"text-transform: capitalize\" [ngClass]=\"{'is-invalid': t.trainername.invalid && t.trainername.touched,'is-valid': t.trainername.valid && \n                            (t.trainername.dirty || t.trainername.touched)}\" />\n                        <div *ngIf=\"t.trainername.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"t.trainername.errors.required\">\n                                Please enter trainer name\n                            </div>\n                            <div *ngIf=\"t.trainername.errors.minlength\">\n                                Minimum length should be 3\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group col-md\">\n                        <label for=\"trainerdesignation\">Trainer Designation:&nbsp;<span\n                                class=\"text-danger\">*&nbsp;</span></label>\n                        <input type=\"text\" class=\"form-control\" placeholder=\"Trainer Designation\"\n                            formControlName=\"trainerdesignation\" maxlength=\"45\" style=\"text-transform: capitalize\"\n                            [ngClass]=\"{'is-invalid': t.trainerdesignation.invalid && t.trainerdesignation.touched,'is-valid': t.trainerdesignation.valid && \n                            (t.trainerdesignation.dirty || t.trainerdesignation.touched)}\" />\n                        <div *ngIf=\"t.trainerdesignation.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"t.trainerdesignation.errors.required\">\n                                Please enter trainer designation\n                            </div>\n                            <div *ngIf=\"t.trainerdesignation.errors.minlength\">\n                                Minimum length should be 3\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group col-md\">\n                        <label for=\"trainingtopic\">Topic of training :&nbsp;<span\n                                class=\"text-danger\">*&nbsp;</span></label>\n                        <!-- (change)=\"trainingtopic($event.target.value)\" -->\n                        <select class=\"form-select\" formControlName=\"trainingtopic\" id=\"trainingtopic\" [ngClass]=\"{'is-invalid': t.trainingtopic.invalid && t.trainingtopic.touched,\n                          'is-valid': t.trainingtopic.valid && (t.trainingtopic.dirty || t.trainingtopic.touched) }\">\n                            <option value=\"\">-- Select Training Topic --</option>\n                            <!-- <option *ngFor=\"let trainingtopic of trainingtopicList\" value=\"{{trainingtopic.regionMasterId}}\">\n                                {{region.regionName}}\n                            </option> -->\n                        </select>\n                        <div *ngIf=\"t.trainingtopic.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"t.trainingtopic.errors.required\">Training Topic selection is required</div>\n                        </div>\n                    </div>\n                </div>\n\n            </form>\n\n        </div>\n\n        <!-- <div class=\"modal-footer\">\n            <div class=\"row\">\n                <button type=\"button\" class=\" btn btn-primary bttn\" (click)=\"saveVillForm()\">Save</button>\n            </div>\n        </div> -->\n\n    </div>\n\n</ng-template>"],"sourceRoot":"webpack:///"}