{"version":3,"sources":["./src/app/modules/village-setup/village-setup.service.ts","./src/app/modules/village-setup/village-setup.module.ts","./src/app/modules/village-setup/village-setup.component.ts","./src/app/modules/village-setup/village-setup.component.html","./src/app/modules/village-setup/village-setup-routing.module.ts"],"names":[],"mappings":"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","file":"modules-village-setup-village-setup-module.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VillageSetupService {\n  baseURL = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n  getStateList(obj): any {\n    return this.http.post(`${this.baseURL}state/getListOfAllStates`, obj)\n  }\n\n  getDistrictAndBlockList(obj): any {\n    return this.http.post(`${this.baseURL}district/getListOfDistrictAndBlock`, obj)\n  }\n}\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VillageSetupRoutingModule } from './village-setup-routing.module';\nimport { VillageSetupComponent } from './village-setup.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [VillageSetupComponent],\n  imports: [\n    CommonModule,\n    VillageSetupRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class VillageSetupModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpService } from '../core/http/http.service';\nimport { VillageSetupService } from './village-setup.service';\n\n@Component({\n  selector: 'app-village-setup',\n  templateUrl: './village-setup.component.html',\n  styleUrls: ['./village-setup.component.css']\n})\nexport class VillageSetupComponent implements OnInit {\n  villageForm: FormGroup;\n  stateList: Array<any> = [];\n  districtList: Array<any> = [];\n  blockList: Array<any> = [];\n\n  constructor(private fb: FormBuilder, private httpService: HttpService, private http: HttpClient,\n    private villageService: VillageSetupService) { }\n\n  ngOnInit(): void {\n    this.createForm();\n\n    // Api call for viewing state list\n    let obj = {\n      dataAccessDTO: this.httpService.dataAccessDTO\n    }\n\n    this.villageService.getStateList(obj).subscribe((res) => {\n      this.stateList = res.responseObject.stateList;\n      console.log(this.stateList);\n    })\n\n  }\n\n  createForm() {\n    this.villageForm = this.fb.group({\n      state: ['', Validators.required],\n      district: ['', Validators.required],\n      block: ['', Validators.required],\n      gp: ['', Validators.required]\n    });\n  }\n\n  get f() {\n    return this.villageForm.controls;\n  }\n\n  changeState(stateId) {\n\n    let obj = {\n      dataAccessDTO: this.httpService.dataAccessDTO,\n      stateId: stateId\n    }\n\n    this.villageService.getDistrictAndBlockList(obj).subscribe((res) => {\n      this.districtList = res.responseObject.stateWiseDistrictList;\n      console.log(this.districtList);\n    })\n\n    // this.villageForm.controls.gp.setValue('');\n    // this.villageForm.controls.gram.setValue('');\n  }\n\n  changeDistrict(districtId) {\n    console.log(districtId);\n    this.blockList = this.districtList.find(block => block.districtMasterId == districtId)?.blockList;\n    console.log(this.blockList);\n  }\n\n  changeBlock(value) {\n\n  }\n\n  changeGp(value) {\n\n  }\n\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"white_box QA_section mb_30\">\n\n                <div id=\"header-fixed\" style=\"display: flex;\">\n                    <h2 class=\"page-title\">Village Setup</h2>\n                </div>\n                <form class=\"form-signin\" [formGroup]=\"villageForm\">\n                    <div class=\"row\">\n                        <div class=\"form-group col-md\">\n                            <label for=\"state\">State :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeState($event.target.value)\"\n                                formControlName=\"state\" [ngClass]=\"{'is-invalid': f.state.invalid && f.state.touched, 'is-valid': \n                                f.state.valid && (f.state.dirty || f.state.touched)}\">\n                                <option value=\"\">-- Select State --</option>\n                                <option *ngFor=\"let state of stateList; index as i\" value=\"{{state.stateMasterId}}\">\n                                    {{state.stateName}}</option>\n                            </select>\n                            <div *ngIf=\"f.state.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"f.state.errors.required\">\n                                    State selection is required\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"district\">District :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeDistrict($event.target.value)\"\n                                formControlName=\"district\" [ngClass]=\"{'is-invalid': f.district.invalid && f.district.touched,\n                                'is-valid': f.district.valid && (f.district.dirty || f.district.touched)}\">\n                                <option value=\"\">-- Select District --</option>\n                                <option *ngFor=\"let district of districtList; index as i\"\n                                    value=\"{{district.districtMasterId}}\">\n                                    {{district.districtName}}</option>\n                            </select>\n                            <div *ngIf=\"f.district.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"f.district.errors.required\">\n                                    District selection is required\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"block\">Block :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeBlock($event.target.value)\"\n                                formControlName=\"block\" [ngClass]=\"{'is-invalid': f.block.invalid && f.block.touched,\n                                'is-valid': f.block.valid && (f.block.dirty || f.block.touched)}\">\n                                <option value=\"\">-- Select Block --</option>\n                                <option *ngFor=\"let block of blockList; index as i\" value=\"{{block.blockMasterId}}\">\n                                    {{block.blockName}} </option>\n                            </select>\n                            <div *ngIf=\"f.block.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"f.block.errors.required\">\n                                    Block selection is required\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"gp\">GP/ Municipality :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeGp($event.target.value)\" formControlName=\"gp\"\n                                id=\"gp\" [ngClass]=\"{\n                              'is-invalid': f.gp.invalid && f.gp.touched,\n                              'is-valid': f.gp.valid && (f.gp.dirty || f.gp.touched)\n                            }\">\n                                <option value=\"\">-- Select GP/ Municipality --</option>\n                                <!-- <option *ngFor=\"let gp of gpDtoList\">\n                                    {{ gp.name }}\n                                </option> -->\n                            </select>\n                            <div *ngIf=\"f.gp.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"f.gp.errors.required\">\n                                    GP selection is required\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { VillageSetupComponent } from './village-setup.component';\n\nconst routes: Routes = [{ path: '', component: VillageSetupComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class VillageSetupRoutingModule { }\n"],"sourceRoot":"webpack:///"}