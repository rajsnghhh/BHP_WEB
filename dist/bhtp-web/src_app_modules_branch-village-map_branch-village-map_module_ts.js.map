{"version":3,"file":"src_app_modules_branch-village-map_branch-village-map_module_ts.js","mappings":"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","sources":["./src/app/modules/branch-village-map/branch-village-map-routing.module.ts","./src/app/modules/branch-village-map/branch-village-map.component.ts","./src/app/modules/branch-village-map/branch-village-map.component.html","./src/app/modules/branch-village-map/branch-village-map.module.ts","./src/app/modules/branch-village-map/branch-village-map.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BranchVillageMapComponent } from './branch-village-map.component';\n\nconst routes: Routes = [{ path: '', component: BranchVillageMapComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BranchVillageMapRoutingModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NgbModal, NgbModalConfig } from '@ng-bootstrap/ng-bootstrap';\nimport { ToastrService } from 'ngx-toastr';\nimport { HttpService } from '../core/http/http.service';\nimport { ConfirmationDialogService } from '../shared/confirmation-dialog/confirmation-dialog.service';\nimport { ValidationService } from '../shared/services/validation.service';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { BranchVillageMapService } from './branch-village-map.service';\n\n@Component({\n  selector: 'app-branch-village-map',\n  templateUrl: './branch-village-map.component.html',\n  styleUrls: ['./branch-village-map.component.css']\n})\nexport class BranchVillageMapComponent implements OnInit {\n  branchVillageForm: UntypedFormGroup;\n  mapVillForm: UntypedFormGroup;\n  regionList: Array<any> = [];\n  branchList: Array<any> = [];\n  mappedVillageList: Array<any> = [];\n  stateList: Array<any> = [];\n  districtList: Array<any> = [];\n  blockList: Array<any> = [];\n  gpList: Array<any> = [];\n  unmappedVillageList: Array<any> = [];\n  branchId: any;\n  branchName: any;\n  districtId: any;\n  districtName: any;\n  page = 1;\n  pageSize = 6;\n  p: any;\n  modalContent: any;\n  modalReference: any;\n  checkMapDataPushPop = {\n    dataAccessDTO: {},\n    branchId: '',\n    villageIdList: [],\n  };\n  checkUnmapDataPushPop = {\n    dataAccessDTO: {},\n    branchId: '',\n    villageIdList: [],\n  };\n  role: any;\n  createMode: boolean;\n  newArrayOfObj: Array<any> = [];\n  checkedAllData = false;\n  regionBranchHide: boolean;\n  villagesOfBranch: Array<any> = [];\n  branchID: any;\n  branchNAme: any;\n  districtNAme: any;\n  searchFullscreen: boolean;\n\n  constructor(private fb: UntypedFormBuilder, private branchVillMapService: BranchVillageMapService, private httpService: HttpService,\n    private modalService: NgbModal, private toaster: ToastrService, private confirmationDialogService: ConfirmationDialogService,\n    private sidebarService: SidebarService, private http: HttpClient, private validationService: ValidationService, private router: Router,\n    config: NgbModalConfig) {\n    config.backdrop = 'static';\n    config.keyboard = false;\n  }\n\n  ngDoCheck(): void {\n    this.searchFullscreen = this.validationService.val;\n  }\n\n  ngOnInit(): void {\n    this.role = this.sidebarService.RoleDTOName;\n    console.log(this.role);\n\n    this.createForm();\n\n    this.sidebarService.checkRoledetailDTO().then((res: any) => {\n      this.branchID = res.branchId;\n      this.branchNAme = res.branchName;\n      this.districtNAme = res.districtName\n      console.log(res, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');\n\n\n      if (res.regionBranchHide) {\n        this.regionList = res.region;\n        this.regionBranchHide = res.regionBranchHide;\n      } else {\n        let dataAccessDTO = JSON.parse(localStorage.getItem('dataAccessDTO'));\n        let Dto = {\n          dataAccessDTO: {\n            userId: dataAccessDTO.userName,\n            userName: dataAccessDTO.userId,\n          },\n          branchId: res.branchId\n        }\n        this.regionBranchHide = res.regionBranchHide;\n        this.http.post(`${this.sidebarService.baseURL}village/getVillagesOfABranch`, Dto).subscribe((res: any) => {\n          if (res.sessionDTO.status == true) {\n            this.villagesOfBranch = res.responseObject;\n          }\n        });\n\n        let Dtos = {\n          dataAccessDTO: this.httpService.dataAccessDTO,\n          branchId: res.branchId\n        }\n        this.branchVillMapService.flatListVillagesOfBranch(Dtos).subscribe((res) => {\n          this.mappedVillageList = res.responseObject;\n          console.log(this.mappedVillageList, 'mappedVillageList');\n        });\n      }\n    });\n\n    this.sidebarService.subMenuList\n      .find(functionShortName => functionShortName.functionShortName == 'Branch Setup')?.subMenuDetailList\n      .find(item => item.subFunctionMasterId == 57 || item.subFunctionMasterId == 58 || item.subFunctionMasterId == 59 || item.subFunctionMasterId == 60)?.accessDetailList\n      .find(accessType => accessType.accessType == 'view')?.accessType ? this.router.navigate(['/branch-villageMap']) : this.router.navigate(['/error']);\n\n    this.createMode = this.sidebarService.subMenuList\n      .find(functionShortName => functionShortName.functionShortName == 'Branch Setup')?.subMenuDetailList\n      .find(subFunctionMasterId => subFunctionMasterId.subFunctionMasterId == 57)?.accessDetailList\n      .find(accessType => accessType.accessType == 'create')?.accessType ? true : false;\n\n    this.regionBranchHide = this.sidebarService.regionBranchHide;\n  }\n\n  changeRegion(regionId) {\n    console.log(regionId);\n\n    let req = {\n      dataAccessDTO: this.httpService.dataAccessDTO,\n      regionId: regionId,\n    };\n    this.branchVillMapService.listOfBranchesOfARegion(req).subscribe((res) => {\n      this.branchList = res.responseObject;\n      console.log(this.branchList, 'this.branchList');\n\n    }, (error) => {\n      this.branchList = null;\n    }\n    );\n    this.branchVillageForm.controls.branch.setValue('');\n    this.mappedVillageList = [];\n    this.checkUnmapDataPushPop.villageIdList = [];\n    if (this.branchVillageForm.value.region == '') {\n      this.branchVillageForm.controls.branch.setValue('');\n      this.mappedVillageList = [];\n      this.checkUnmapDataPushPop.villageIdList = [];\n    }\n  }\n\n  changeBranch(branchId) {\n    this.branchId = branchId;\n    this.branchName = this.branchList.find(item => item.branchId == this.branchId)?.branchName;\n    console.log(this.branchName);\n\n    var district = this.branchList?.find(item => item.branchId == this.branchId)?.districtMasterDto;\n    this.districtName = district?.districtName;\n    this.districtId = district?.districtMasterId;\n    console.log(this.districtName, this.districtId);\n\n    let Dto = {\n      dataAccessDTO: this.httpService.dataAccessDTO,\n      branchId: this.branchId\n    }\n    this.branchVillMapService.flatListVillagesOfBranch(Dto).subscribe((res) => {\n      this.mappedVillageList = res.responseObject;\n      console.log(this.mappedVillageList, 'mappedVillageList');\n    });\n\n    this.mappedVillageList = [];\n    this.checkUnmapDataPushPop.villageIdList = [];\n\n    if (this.branchVillageForm.value.branch == '') {\n      this.mappedVillageList = [];\n      this.checkUnmapDataPushPop.villageIdList = [];\n    }\n  }\n\n  createForm() {\n    this.branchVillageForm = this.fb.group({\n      region: ['', Validators.required],\n      branch: ['', Validators.required]\n    });\n  }\n\n  get f() {\n    return this.branchVillageForm.controls;\n  }\n\n  mapVillForms(mapVill) {\n    this.mapVillForm = this.fb.group({\n      state: ['', Validators.required],\n      district: ['', Validators.required],\n      block: ['', Validators.required],\n      gp: ['', Validators.required]\n    });\n\n  }\n\n  mapVillage(mapVill) {\n    this.modalContent = '';\n    this.modalReference = this.modalService.open(mapVill, {\n      windowClass: 'mapVill',\n    });\n    this.mapVillForms(mapVill);\n\n    // Api call for viewing state list\n    let obj = { dataAccessDTO: this.httpService.dataAccessDTO }\n    this.branchVillMapService.getStateList(obj).subscribe((res) => {\n      this.stateList = res.responseObject.stateList;\n      console.log(this.stateList);\n    });\n  }\n\n  changeState(stateId) {\n\n    let obj = { dataAccessDTO: this.httpService.dataAccessDTO, stateId: stateId }\n    this.branchVillMapService.getDistrictAndBlockList(obj).subscribe((res) => {\n      this.districtList = res.responseObject.stateWiseDistrictList;\n      console.log(this.districtList);\n    })\n\n    this.mapVillForm.controls.district.setValue('');\n    this.mapVillForm.controls.block.setValue('');\n    this.mapVillForm.controls.gp.setValue('');\n    this.newArrayOfObj = [];\n    this.checkMapDataPushPop.villageIdList = [];\n    const input = document.getElementById('flexCheckDefaults') as HTMLInputElement | null;\n    if (input != null) {\n      input.checked = false;\n    }\n    if (this.mapVillForm.value.state == '') {\n      this.mapVillForm.controls.district.setValue('');\n      this.mapVillForm.controls.block.setValue('');\n      this.mapVillForm.controls.gp.setValue('');\n      this.newArrayOfObj = [];\n      this.checkMapDataPushPop.villageIdList = [];\n    }\n\n  }\n\n  changeDistrict(districtId) {\n    console.log(districtId);\n\n    this.blockList = this.districtList.find(block => block.districtMasterId == districtId)?.blockList;\n    console.log(this.blockList);\n\n    this.mapVillForm.controls.block.setValue('');\n    this.mapVillForm.controls.gp.setValue('');\n    this.newArrayOfObj = [];\n    this.checkMapDataPushPop.villageIdList = [];\n    const input = document.getElementById('flexCheckDefaults') as HTMLInputElement | null;\n    if (input != null) { input.checked = false }\n    if (this.mapVillForm.value.district == '') {\n      this.mapVillForm.controls.block.setValue('');\n      this.mapVillForm.controls.gp.setValue('');\n      this.newArrayOfObj = [];\n      this.checkMapDataPushPop.villageIdList = [];\n    }\n  }\n\n  changeBlock(blockId) {\n    console.log(blockId);\n\n    this.gpList = this.blockList.find(gp => gp.blockMasterId == blockId)?.gpDtoList;\n    console.log(this.gpList);\n    this.mapVillForm.controls.gp.setValue('');\n    this.newArrayOfObj = [];\n    this.checkMapDataPushPop.villageIdList = [];\n    const input = document.getElementById('flexCheckDefaults') as HTMLInputElement | null;\n    if (input != null) { input.checked = false }\n    if (this.mapVillForm.value.block == '') {\n      this.mapVillForm.controls.gp.setValue('');\n      this.newArrayOfObj = [];\n      this.checkMapDataPushPop.villageIdList = [];\n    }\n  }\n\n  changeGp(GPID) {\n    console.log(GPID);\n\n    let obj = { dataAccessDTO: this.httpService.dataAccessDTO, gpMunicipalId: GPID };\n    this.branchVillMapService.getUnmappedVillagesOfGP(obj).subscribe((res) => {\n      this.unmappedVillageList = res.responseObject;\n\n      this.newArrayOfObj = this.unmappedVillageList?.map(({\n        isChecked = false,\n        ...rest\n      }) => ({\n        isChecked,\n        ...rest\n      }));\n\n      console.log(this.unmappedVillageList);\n      console.log(this.newArrayOfObj, 'newArrayOfObj');\n    });\n\n    this.newArrayOfObj = [];\n    this.checkedAllData = false;\n    this.checkMapDataPushPop.villageIdList = [];\n    if (this.mapVillForm.value.gp == '') {\n      this.newArrayOfObj = [];\n      this.checkedAllData = false;\n      this.checkMapDataPushPop.villageIdList = [];\n    }\n\n  }\n\n  get v() {\n    return this.mapVillForm.controls;\n  }\n\n  branchVillModalDismiss() {\n    this.modalReference?.close();\n    this.newArrayOfObj = [];\n  }\n\n  mapVillCheck(e, i) {\n    this.checkedAllData = false;\n    var checkboxData = e.target.checked;\n    this.checkMapDataPushPop.villageIdList = []\n\n    if (checkboxData) {\n\n      this.newArrayOfObj[i].isChecked = true;\n      var data = this.newArrayOfObj.filter(it => it.isChecked == true)\n      if (data.length != this.newArrayOfObj.length) {\n        this.checkedAllData = false\n      } else {\n        this.checkedAllData = true\n      }\n      console.log(this.newArrayOfObj, 'Checked');\n    } else {\n      this.newArrayOfObj[i].isChecked = false\n      var data = this.newArrayOfObj.filter(it => it.isChecked == true)\n      if (data.length != this.newArrayOfObj.length) {\n        this.checkedAllData = false\n      } else {\n        this.checkedAllData = true\n      }\n      console.log(this.newArrayOfObj, 'unchecked');\n    }\n\n  }\n\n  selectAll(e) {\n    this.checkMapDataPushPop.villageIdList = []\n    this.checkedAllData = false;\n    if (e.target.checked == true) {\n      this.checkedAllData = true\n      this.newArrayOfObj?.forEach(it => {\n        it.isChecked = true;\n        console.log(this.newArrayOfObj, 'checked');\n      });\n\n    } else {\n      this.checkedAllData = false\n      this.newArrayOfObj?.forEach(it => {\n        it.isChecked = false;\n        console.log(this.newArrayOfObj, 'unchecked');\n      })\n\n    }\n\n  }\n\n  disabledMap() {\n    let flag = true;\n    var data = this.newArrayOfObj?.filter(it => it.isChecked == true);\n\n    if (data?.length == 0) {\n      flag = false;\n    } else if (!this.newArrayOfObj) {\n      flag = false;\n    }\n    return flag;\n  }\n\n  allDisabledCheck() {\n\n    let flag = true;\n    if (!this.mapVillForm.value.gp) {\n      flag = false;\n    } else if (!this.newArrayOfObj) {\n      flag = false;\n    }\n    return flag;\n  }\n\n  saveMapVills() {\n    console.log('savevillmap');\n    \n    if (this.mapVillForm.value.district != this.districtId) {\n      this.confirmationDialogService.confirm('', 'You are mapping villages of a different district with the' + ' ' + this.branchName + ' ' + '.')\n        .then(() => this.map()\n        )\n        .catch(() => '');\n\n    }\n    else {\n      this.confirmationDialogService.confirm('', 'Are you sure you want to map selected villages to the' + ' ' + this.branchName + ' ' + '?')\n        .then(() => this.map()\n        )\n        .catch(() => '');\n\n    }\n\n    console.log(this.mapVillForm.value.district, 'this.mapVillForm.value.district');\n    console.log(this.districtId, 'this.districtId');\n\n  }\n\n  map() {\n\n    var data = this.newArrayOfObj.filter(it => it.isChecked == true)\n\n    data.forEach(it => {\n      this.checkMapDataPushPop.dataAccessDTO = this.httpService.dataAccessDTO,\n        this.checkMapDataPushPop.branchId = this.branchId ? this.branchId : this.branchID,\n        this.checkMapDataPushPop.villageIdList.push({ villageId: it.villageMasterId });\n\n      console.log(this.checkMapDataPushPop, 'finaldata for mapping');\n    })\n\n    this.branchVillMapService.mapVillagesToABranch(this.checkMapDataPushPop).subscribe((res) => {\n      console.log(res);\n      if (res.status == true) {\n        this.showSuccess(res.message);\n        this.branchVillModalDismiss();\n        this.changeBranch(this.branchId ? this.branchId : this.branchID);\n      }\n      else {\n        this.showError(res.message);\n      }\n\n    });\n\n  }\n\n  unMapVillCheck(e, villId) {\n    var checkboxData = e.target.checked;\n    if (checkboxData) {\n      this.checkUnmapDataPushPop.dataAccessDTO = this.httpService.dataAccessDTO,\n        this.checkUnmapDataPushPop.villageIdList.push({ villageId: villId });\n    }\n    else {\n      var i = this.checkUnmapDataPushPop.villageIdList.findIndex(list => list.villageId == villId);\n      this.checkUnmapDataPushPop.villageIdList.splice(i, 1);\n    }\n\n    console.log(this.checkUnmapDataPushPop, 'checkUnmapDataPushPop');\n\n  }\n\n  saveunmapVill() {\n\n    this.confirmationDialogService.confirm('', 'Are you sure you want to unmap selected villages from the' + ' ' + this.branchName + ' ' + '?')\n      .then(() => this.unmap()\n      )\n      .catch(() => '');\n\n  }\n\n  unmap() {\n    this.branchVillMapService.unmapVillagesFromABranch(this.checkUnmapDataPushPop).subscribe((res) => {\n      console.log(res);\n      if (res.status == true) {\n        this.showSuccess(res.message);\n        this.changeBranch(this.branchId ? this.branchId : this.branchID);\n      }\n      else {\n        this.showError(res.message);\n      }\n\n    })\n\n  }\n\n  showSuccess(message) {\n    this.toaster.success(message, 'Branch-Village Map', {\n      timeOut: 3000,\n    });\n  }\n\n  showError(message) {\n    this.toaster.error(message, 'Branch-Village Map', {\n      timeOut: 3000,\n    });\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"white_box QA_section mb_30\">\n                <div id=\"header-fixed\" style=\"display: flex;\">\n                    <h2 class=\"page-title\">Branch-Village Map</h2>\n                    <div class=\"form-group col-md\">\n                        <button class=\"btn btn-primary\" (click)=\"mapVillage(mapVill)\"\n                            *ngIf=\"(branchID || branchId) && createMode\" style=\"float: right;\">Map\n                            Village</button>\n                    </div>\n                </div>\n\n                <form class=\"form-signin\" [formGroup]=\"branchVillageForm\">\n\n                    <div class=\"row\" *ngIf=\"regionBranchHide\">\n                        <div class=\"form-group col-md\">\n                            <label for=\"region\">Region :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeRegion($event.target.value)\"\n                                formControlName=\"region\" id=\"region\" [ngClass]=\"{ 'is-invalid': f.region.invalid && f.region.touched, \n                                'is-valid': f.region.valid && (f.region.dirty || f.region.touched)}\">\n                                <option value=\"\">-- Select Region --</option>\n                                <option *ngFor=\"let region of regionList\" value=\"{{region.regionMasterId}}\">\n                                    {{region.regionName}}\n                                </option>\n                            </select>\n                            <div *ngIf=\"f.region.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"f.region.errors.required\">Region selection is required</div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"branch\">Branch :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeBranch($event.target.value)\"\n                                formControlName=\"branch\" id=\"branch\" [ngClass]=\"{'is-invalid': f.branch.invalid && f.branch.touched,\n                              'is-valid': f.branch.valid && (f.branch.dirty || f.branch.touched)}\">\n                                <option value=\"\">-- Select Branch --</option>\n                                <option *ngFor=\"let branch of branchList\" value=\"{{branch.branchId}}\">\n                                    {{ branch.branchName }}\n                                </option>\n                            </select>\n                            <div *ngIf=\"f.branch.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"f.branch.errors.required\">Branch selection is required</div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\" white_box_tittle list_header\">\n\n                        <div class=\"QA_table\">\n                            <div id=\"DataTables_Table_0_wrapper\" class=\"dataTables_wrapper no-footer\">\n                                <table\n                                    class=\"table lms_table_active dataTable no-footer dtr-inline collapsed table table-striped\"\n                                    role=\"grid\" aria-describedby=\"DataTables_Table_0_info\" style=\"table-layout: fixed;\">\n\n                                    <thead id=\"header-fixed\">\n                                        <tr>\n                                            <th style=\"width: 8%;\">SL No</th>\n                                            <th style=\"width: 18%;\">District</th>\n                                            <th style=\"width: 18%;\">Block</th>\n                                            <th style=\"width: 18%;\">GP</th>\n                                            <th style=\"width: 25%;\">Village</th>\n                                            <th *ngIf=\"createMode\">Un-Map Village</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n\n                                        <tr *ngFor=\"let unmap of mappedVillageList; index as i\">\n                                            <td style=\"width: 8%;\">{{(p-1)*5+i+1 ? (p-1)*5+i+1 : i+1}}</td>\n                                            <td style=\"width: 18%;\">{{unmap.districtDto.districtName}}</td>\n                                            <td style=\"width: 18%;\">{{unmap.blockDto.blockName}}</td>\n                                            <td style=\"width: 18%;\">{{unmap.gpDto.gpName}}</td>\n                                            <td style=\"width: 25%;\">{{unmap.villageName}}</td>\n                                            <td *ngIf=\"createMode\"><input class=\"form-check-input\" type=\"checkbox\"\n                                                    value=\"\" id=\"flexCheckDefaul\"\n                                                    (change)=\"unMapVillCheck($event, unmap.villageId)\">\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table> <br>\n\n                                <div class=\"row\">\n                                    <div class=\"form-group col-md-6\">\n                                        <button type=\"button\" class=\" btn btn-primary bttn\"\n                                            [disabled]=\"checkUnmapDataPushPop.villageIdList.length == 0\"\n                                            (click)=\"saveunmapVill()\"\n                                            *ngIf=\"(branchID || branchId) && createMode\">Unmap</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #mapVill>\n\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n\n            <div class=\"row\">\n                <div class=\"form-group col-md-5\">\n                    <label for=\"branch\" style=\"font-weight: 500;\n                    font-size: 1.05rem;\">Branch :</label>&nbsp;&nbsp;&nbsp;\n                    {{branchName? branchName: branchNAme}}\n                </div>\n\n                <div class=\"form-group col-md-5\">\n                    <label for=\"\" style=\"font-weight: 500;\n                        font-size: 1.05rem;\">District :</label>&nbsp;&nbsp;&nbsp;\n                    {{districtName ? districtName : districtNAme}}\n                </div>\n\n                <div class=\"col-md-2\">\n                    <span class=\"close\" (click)=\"branchVillModalDismiss()\"\n                        style=\"cursor: pointer;font-size: 35px;\">&times;</span>\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\"modal-body\">\n            <form class=\"form-signin\" [formGroup]=\"mapVillForm\">\n                <div class=\"row\">\n                    <div class=\"form-group col-md\">\n                        <label for=\"state\">State :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                        <select class=\"form-select\" (change)=\"changeState($event.target.value)\" formControlName=\"state\"\n                            [ngClass]=\"{'is-invalid': v.state.invalid && v.state.touched, 'is-valid': \n                                v.state.valid && (v.state.dirty || v.state.touched)}\">\n                            <option value=\"\">-- Select --</option>\n                            <option *ngFor=\"let state of stateList; index as i\" value=\"{{state.stateMasterId}}\">\n                                {{state.stateName}}</option>\n                        </select>\n                        <div *ngIf=\"v.state.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"v.state.errors.required\">\n                                State selection is required\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group col-md\">\n                        <label for=\"district\">District :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                        <select class=\"form-select\" (change)=\"changeDistrict($event.target.value)\"\n                            formControlName=\"district\" [ngClass]=\"{'is-invalid': v.district.invalid && v.district.touched,\n                                'is-valid': v.district.valid && (v.district.dirty || v.district.touched)}\">\n                            <option value=\"\">-- Select --</option>\n                            <option *ngFor=\"let district of districtList; index as i\"\n                                value=\"{{district.districtMasterId}}\">\n                                {{district.districtName}}</option>\n                        </select>\n                        <div *ngIf=\"v.district.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"v.district.errors.required\">\n                                District selection is required\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group col-md\">\n                        <label for=\"block\">Block :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                        <select class=\"form-select\" (change)=\"changeBlock($event.target.value)\" formControlName=\"block\"\n                            [ngClass]=\"{'is-invalid': v.block.invalid && v.block.touched,\n                                'is-valid': v.block.valid && (v.block.dirty || v.block.touched)}\">\n                            <option value=\"\">-- Select --</option>\n                            <option *ngFor=\"let block of blockList; index as i\" value=\"{{block.blockMasterId}}\">\n                                {{block.blockName}} </option>\n                        </select>\n                        <div *ngIf=\"v.block.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"v.block.errors.required\">\n                                Block selection is required\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group col-md\">\n                        <label for=\"gp\">GP/ Municipality :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                        <select class=\"form-select\" (change)=\"changeGp($event.target.value)\" formControlName=\"gp\"\n                            id=\"gp\" [ngClass]=\"{'is-invalid': v.gp.invalid && v.gp.touched,\n                              'is-valid': v.gp.valid && (v.gp.dirty || v.gp.touched) }\">\n                            <option value=\"\">-- Select --</option>\n                            <option *ngFor=\"let gp of gpList\" value=\"{{gp.gpMunicipalId}}\">\n                                {{ gp.name }}\n                            </option>\n                        </select>\n                        <div *ngIf=\"v.gp.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"v.gp.errors.required\">\n                                GP selection is required\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n\n                <div class=\" white_box_tittle list_header\">\n\n                    <div class=\"QA_table \">\n                        <div id=\"DataTables_Table_0_wrapper\" class=\"dataTables_wrapper no-footer\">\n                            <table\n                                class=\"table lms_table_active dataTable no-footer dtr-inline collapsed table table-striped\"\n                                role=\"grid\" aria-describedby=\"DataTables_Table_0_info\"\n                                style=\"table-layout: fixed; text-align:center \">\n                                <thead id=\"header_fixed\">\n                                    <tr>\n                                        <th>SL No</th>\n                                        <th>District</th>\n                                        <th>Block</th>\n                                        <th>GP</th>\n                                        <th>Village</th>\n                                        <th *ngIf=\"checkedAllData == true\">Map Village<br> <input\n                                                class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefaults\"\n                                                style=\"margin-left:15px;\" [checked]=\"true\" (change)=\"selectAll($event)\"\n                                                [disabled]=\"!allDisabledCheck()\"> All\n                                        </th>\n\n                                        <th *ngIf=\"checkedAllData == false\">Map Village<br> <input\n                                                class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefaults\"\n                                                style=\"margin-left:15px;\" [checked]=\"false\" (change)=\"selectAll($event)\"\n                                                [disabled]=\"!allDisabledCheck()\"> All\n                                        </th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n\n                                    <tr *ngFor=\"let map of newArrayOfObj ; index as i\">\n                                        <td>{{(p-1)*5+i+1 ? (p-1)*5+i+1 : i+1}}</td>\n                                        <td>{{map.districtDetailsDto.districtName}}</td>\n                                        <td>{{map.blockDetailsDto.blockName}}</td>\n                                        <td>{{map.gpDetailsDto.name}}</td>\n                                        <td>{{map.villageName}}</td>\n                                        <td *ngIf=\"map.isChecked == true\"> <input class=\"form-check-input\"\n                                                type=\"checkbox\" value=\"\" id=\"flexCheckDefault\" [checked]=\"true\"\n                                                (change)=\"mapVillCheck($event,i)\"> </td>\n\n                                        <td *ngIf=\"map.isChecked == false\"> <input class=\"form-check-input\"\n                                                type=\"checkbox\" value=\"\" id=\"flexCheckDefault\" [checked]=\"false\"\n                                                (change)=\"mapVillCheck($event,i)\"> </td>\n                                    </tr>\n\n                                </tbody>\n                            </table>\n\n                        </div>\n                    </div>\n                </div>\n            </form>\n\n            <div class=\"row\">\n                <button type=\"button\" class=\" btn btn-primary bttn\" (click)=\"saveMapVills()\" [disabled]=\"!disabledMap()\"\n                    style=\"width: 10%;  margin-left: 650px;\">Map</button>\n            </div>\n        </div>\n\n    </div>\n\n</ng-template>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BranchVillageMapRoutingModule } from './branch-village-map-routing.module';\nimport { BranchVillageMapComponent } from './branch-village-map.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\n\n@NgModule({\n  declarations: [BranchVillageMapComponent],\n  imports: [\n    CommonModule,\n    BranchVillageMapRoutingModule,\n    ReactiveFormsModule,\n    NgxPaginationModule,\n  ]\n})\nexport class BranchVillageMapModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BranchVillageMapService {\n\n  baseURL = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n  listOfRegionsOfUser(obj): any {\n    return this.http.post(`${this.baseURL}branch/getListOfRegionsOfUser`, obj)\n  }\n\n  listOfBranchesOfARegion(obj): any {\n    return this.http.post(`${this.baseURL}branch/getListOfBranchesOfARegion`, obj)\n  }\n\n  flatListVillagesOfBranch(obj): any {\n    return this.http.post(`${this.baseURL}village/getFlatListOfVillagesOfABranch`, obj)\n  }\n\n  getStateList(obj): any {\n    return this.http.post(`${this.baseURL}state/getListOfAllStates`, obj)\n  }\n\n  getDistrictAndBlockList(obj): any {\n    return this.http.post(`${this.baseURL}district/getListOfDistrictAndBlock`, obj)\n  }\n\n  getUnmappedVillagesOfGP(obj): any {\n    return this.http.post(`${this.baseURL}branchVillageMap/getUnmappedVillagesOfAGp`, obj)\n  }\n\n  mapVillagesToABranch(obj): any {\n    return this.http.post(`${this.baseURL}branchVillageMap/mapVillagesToABranch`, obj)\n  }\n\n  unmapVillagesFromABranch(obj): any {\n    return this.http.post(`${this.baseURL}branchVillageMap/unmapVillages`, obj)\n  }\n\n}\n"],"names":["RouterModule","BranchVillageMapComponent","routes","path","component","BranchVillageMapRoutingModule","forChild","imports","exports","Validators","i0","constructor","fb","branchVillMapService","httpService","modalService","toaster","confirmationDialogService","sidebarService","http","validationService","router","config","dataAccessDTO","branchId","villageIdList","backdrop","keyboard","ngDoCheck","searchFullscreen","val","ngOnInit","role","RoleDTOName","console","log","createForm","checkRoledetailDTO","then","res","branchID","branchNAme","branchName","districtNAme","districtName","regionBranchHide","regionList","region","JSON","parse","localStorage","getItem","Dto","userId","userName","post","baseURL","subscribe","sessionDTO","status","villagesOfBranch","responseObject","Dtos","flatListVillagesOfBranch","mappedVillageList","subMenuList","find","functionShortName","subMenuDetailList","item","subFunctionMasterId","accessDetailList","accessType","navigate","createMode","changeRegion","regionId","req","listOfBranchesOfARegion","branchList","error","branchVillageForm","controls","branch","setValue","checkUnmapDataPushPop","value","changeBranch","district","districtMasterDto","districtId","districtMasterId","group","required","f","mapVillForms","mapVill","mapVillForm","state","block","gp","mapVillage","modalContent","modalReference","open","windowClass","obj","getStateList","stateList","changeState","stateId","getDistrictAndBlockList","districtList","stateWiseDistrictList","newArrayOfObj","checkMapDataPushPop","input","document","getElementById","checked","changeDistrict","blockList","changeBlock","blockId","gpList","blockMasterId","gpDtoList","changeGp","GPID","gpMunicipalId","getUnmappedVillagesOfGP","unmappedVillageList","map","isChecked","rest","checkedAllData","v","branchVillModalDismiss","close","mapVillCheck","e","i","checkboxData","target","data","filter","it","length","selectAll","forEach","disabledMap","flag","allDisabledCheck","saveMapVills","confirm","catch","push","villageId","villageMasterId","mapVillagesToABranch","showSuccess","message","showError","unMapVillCheck","villId","findIndex","list","splice","saveunmapVill","unmap","unmapVillagesFromABranch","success","timeOut","selectors","decls","vars","consts","template","CommonModule","ReactiveFormsModule","NgxPaginationModule","BranchVillageMapModule","declarations","environment","BranchVillageMapService","apiUrl","listOfRegionsOfUser","factory","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}