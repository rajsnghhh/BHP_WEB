{"version":3,"file":"src_app_modules_escort-reref-register_escort-reref-register_module_ts.js","mappings":"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","sources":["./src/app/modules/escort-reref-register/escort-reref-register-routing.module.ts","./src/app/modules/escort-reref-register/escort-reref-register.component.ts","./src/app/modules/escort-reref-register/escort-reref-register.component.html","./src/app/modules/escort-reref-register/escort-reref-register.module.ts","./src/app/modules/escort-reref-register/escort-reref-register.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { EscortRerefRegisterComponent } from './escort-reref-register.component';\n\nconst routes: Routes = [{ path: '', component: EscortRerefRegisterComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class EscortRerefRegisterRoutingModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NgbModal, NgbModalConfig } from '@ng-bootstrap/ng-bootstrap';\nimport * as moment from 'moment';\nimport { HttpService } from '../core/http/http.service';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { EscortRerefRegisterService } from './escort-reref-register.service';\n\n@Component({\n  selector: 'app-escort-reref-register',\n  templateUrl: './escort-reref-register.component.html',\n  styleUrls: ['./escort-reref-register.component.css']\n})\nexport class EscortRerefRegisterComponent implements OnInit {\n  viewEscortReferForm: FormGroup;\n  createEscortReferForm: FormGroup;\n  regionBranchHide: boolean;\n  regionList: Array<any> = [];\n  lowerRoleBranchId: any;\n  branchList: Array<any> = [];\n  villagesOfBranch: Array<any> = [];\n  villageList: Array<any> = [];\n  gpList: Array<any> = [];\n  villageID: any;\n  loader: boolean = true;\n  createERRegisterModal: any;\n  modalContent: any;\n  minDate:any;\n\n\n  constructor(private sidebarService: SidebarService, private http: HttpClient, private router: Router, private fb: FormBuilder,\n    private httpService: HttpService, private escortReferService: EscortRerefRegisterService, private modalService: NgbModal,\n    config: NgbModalConfig,) {\n    config.backdrop = 'static';\n    config.keyboard = false;\n  }\n\n  ngOnInit(): void {\n    this.viewEscort_ReferForm();\n    this.sidebarService.checkRoledetailDTO().then((res: any) => {\n      if (res.regionBranchHide) {\n        this.regionList = res.region;\n        this.regionBranchHide = res.regionBranchHide;\n      } else {\n        this.lowerRoleBranchId = res.branchId;\n        let dataAccessDTO = JSON.parse(localStorage.getItem('dataAccessDTO'));\n        let Dto = {\n          dataAccessDTO: {\n            userId: dataAccessDTO.userId,\n            userName: dataAccessDTO.userName,\n          },\n          branchId: this.lowerRoleBranchId\n        }\n        this.regionBranchHide = res.regionBranchHide;\n        this.http.post(`${this.sidebarService.baseURL}village/getVillagesOfABranch`, Dto).subscribe((res: any) => {\n          if (res.sessionDTO.status == true) {\n            this.villagesOfBranch = res.responseObject;\n            console.log(this.villagesOfBranch, 'lowerrankvillagesOfBranch');\n          }\n        });\n      }\n    });\n\n    // this.sidebarService.subMenuList\n    //   .find(functionShortName => functionShortName.functionMasterId == 5)?.subMenuDetailList\n    //   .find(item => item.subFunctionMasterId == 226 || item.subFunctionMasterId == 227 || item.subFunctionMasterId == 228 || item.subFunctionMasterId == 229)?.accessDetailList\n    //   .find(accessType => accessType.accessType == 'view')?.accessType ? this.router.navigate(['/material-distribution-register']) : this.router.navigate(['/error']);\n\n    // this.createMode = this.sidebarService.subMenuList\n    //   .find(functionShortName => functionShortName.functionMasterId == 5)?.subMenuDetailList\n    //   .find(item => item.subFunctionMasterId == 226 || item.subFunctionMasterId == 227 || item.subFunctionMasterId == 228 || item.subFunctionMasterId == 229)?.accessDetailList\n    //   .find(accessType => accessType.accessType == 'create')?.accessType ? true : false;\n\n    // this.updateMode = this.sidebarService.subMenuList\n    //   .find(functionShortName => functionShortName.functionMasterId == 5)?.subMenuDetailList\n    //   .find(item => item.subFunctionMasterId == 226 || item.subFunctionMasterId == 227 || item.subFunctionMasterId == 228 || item.subFunctionMasterId == 229)?.accessDetailList\n    //   .find(accessType => accessType.accessType == 'update')?.accessType ? true : false;\n\n    // this.deleteMode = this.sidebarService.subMenuList\n    //   .find(functionShortName => functionShortName.functionMasterId == 5)?.subMenuDetailList\n    //   .find(item => item.subFunctionMasterId == 226 || item.subFunctionMasterId == 227 || item.subFunctionMasterId == 228 || item.subFunctionMasterId == 229)?.accessDetailList\n    //   .find(accessType => accessType.accessType == 'delete')?.accessType ? true : false;\n  }\n\n  viewEscort_ReferForm() {\n    this.viewEscortReferForm = this.fb.group({\n      region: ['', Validators.required],\n      branch: ['', Validators.required],\n      block: ['', Validators.required],\n      gp: ['', Validators.required],\n      gram: ['', Validators.required]\n    })\n  }\n\n  get m() {\n    return this.viewEscortReferForm.controls;\n  }\n\n  changeRegion(regionId) {\n    console.log(regionId, 'regionMasterId');\n    if (regionId) {\n      let req = { dataAccessDTO: this.httpService.dataAccessDTO, regionId: regionId };\n      this.escortReferService.getBranchesOfRegion(req).subscribe((res) => {\n        this.branchList = res.responseObject;\n        console.log(this.branchList, 'branchList');\n      });\n    }\n\n    this.viewEscortReferForm.controls.branch.setValue('');\n    this.viewEscortReferForm.controls.block.setValue('');\n    this.viewEscortReferForm.controls.gp.setValue('');\n    this.viewEscortReferForm.controls.gram.setValue('');\n    this.gpList = [];\n    this.villageList = [];\n    this.villagesOfBranch = [];\n    if (this.viewEscortReferForm.value.region == '') {\n      this.branchList = [];\n    }\n  }\n\n  changeBranch(branchId) {\n    console.log(branchId, 'branchId');\n    let req = { dataAccessDTO: this.httpService.dataAccessDTO, branchId: branchId };\n    this.escortReferService.getVillagesOfBranch(req).subscribe((res) => {\n      this.villagesOfBranch = res.responseObject;\n      console.log(this.villagesOfBranch, 'villagesOfBranch');\n    });\n\n    this.viewEscortReferForm.controls.block.setValue('');\n    this.viewEscortReferForm.controls.gp.setValue('');\n    this.viewEscortReferForm.controls.gram.setValue('');\n    this.gpList = [];\n    this.villageList = [];\n  }\n\n  changeBlock(blockId) {\n    console.log(blockId, 'blockId');\n    this.gpList = this.villagesOfBranch.find(block => block.blockMasterId == blockId)?.gpDtoList;\n    console.log(this.gpList, 'gplist');\n\n    this.viewEscortReferForm.controls.gp.setValue('');\n    this.viewEscortReferForm.controls.gram.setValue('');\n    this.villageList = [];\n  }\n\n  changeGp(gpId) {\n    console.log(gpId, 'GpId');\n    this.villageList = this.gpList.find(gp => gp.gpMunicipalId == gpId)?.villageDtoList;\n    console.log(this.villageList, 'villageList');\n\n    this.viewEscortReferForm.controls.gram.setValue('');\n  }\n\n  changeVillage(villageId) {\n    this.villageID = villageId;\n    console.log(this.villageID, 'changevillage this.villageID');\n\n    // let req = { dataAccessDTO: this.httpService.dataAccessDTO, village_master_id: villageId };\n    // this.escortReferService.getMaterialDistributionList(req).subscribe((res: any) => {\n    //   this.materialDistributionList = res.responseObject;\n    //   console.log(this.materialDistributionList, 'this.materialDistributionList');\n    // })\n  }\n\n  createEscortRefer(createER) {\n    this.createEscort_ReferForm();\n    this.modalContent = '';\n    this.createERRegisterModal = this.modalService.open(createER, {\n      windowClass: 'createER',\n    });\n    this.minDate = moment(new Date()).subtract(7, \"days\").format(\"YYYY-MM-DD\");\n  }\n\n  createERModalDismiss() {\n    this.createERRegisterModal.close();\n  }\n\n  createEscort_ReferForm() {\n    this.createEscortReferForm = this.fb.group({\n      date: ['', Validators.required],\n    })\n  }\n\n  get r() {\n    return this.createEscortReferForm.controls;\n  }\n\n  restrictTypeOfDate() {\n    return false;\n  }\n\n\n}","<app-loader [hidden]=\"loader\"></app-loader>\n<div class=\"container\">\n    <div class=\"row\">\n\n        <div class=\"col-md-12\">\n            <div class=\"white_box QA_section mb_30\">\n                <div id=\"header-fixed\" style=\"display: flex;\">\n                    <h2 class=\"page-title\">Escort/ Refer Register</h2>\n\n                    <!-- <div class=\"box_right d-flex lms_block col-md-6\">\n                        <div class=\"serach_field_2\">\n                            <div [ngClass]=\" searchFullscreen? 'search_inner_fullscreen ' : ' search_inner' \">\n                                <form active=\"#\">\n                                    <div class=\"search_field\">\n                                        <input type=\"text\" name=\"search\" placeholder=\"search by staff or ss name ...\"\n                                            [(ngModel)]=\"registerSearch\">\n                                    </div>\n                                    <button type=\"submit\"> <i class=\"fa fa-search\"></i> </button>\n                                </form>\n                            </div>\n                        </div>\n                    </div> -->\n\n                    <!-- *ngIf=\"!viewEscortReferForm.value.gram || !createMode\" -->\n                    <!-- <div class=\"form-group col-md\" style=\"display: flex; justify-content:flex-end\" *ngIf=\"!viewEscortReferForm.value.gram\">\n                        <i class=\" fas fa-plus-circle\"\n                        style=\"cursor: pointer; color: #a8d7d7; font-size: 30px; margin-top: 5px;\"\n                        title=\"Create Escort/ Refer Register\"></i>\n                    </div> -->\n\n                    <!-- *ngIf=\"(viewEscortReferForm.value.gram && createMode) || (lowerRankbranchId && createMode)\" -->\n                    <div class=\"form-group col-md\" style=\"display: flex; justify-content:flex-end\">\n                        <i class=\"fas fa-plus-circle\"\n                            style=\"cursor: pointer; color: #499; font-size: 30px; margin-top: 5px;\"\n                            title=\"Create Escort/ Refer Register\" (click)=\"createEscortRefer(createER)\"></i>\n                    </div>\n                </div>\n\n                <form class=\"form-signin\" [formGroup]=\"viewEscortReferForm\">\n\n                    <div class=\"row\" *ngIf=\"regionBranchHide\">\n                        <div class=\"form-group col-md\">\n                            <label for=\"region\">Region :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeRegion($event.target.value)\"\n                                formControlName=\"region\" id=\"region\"\n                                [ngClass]=\"{'is-invalid': m.region.invalid\n                                 && m.region.touched,  'is-valid':  m.region.valid && (m.region.dirty || m.region.touched) }\">\n                                <option value=\"\">-- Select Region --</option>\n                                <option *ngFor=\"let region of regionList\" value=\"{{region.regionMasterId}}\">\n                                    {{region.regionName}}\n                                </option>\n                            </select>\n                            <div *ngIf=\"m.region.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"m.region.errors.required\">Region selection is required</div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"branch\">Branch :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeBranch($event.target.value)\"\n                                formControlName=\"branch\" id=\"branch\" [ngClass]=\"{'is-invalid': m.branch.invalid && m.branch.touched,\n                              'is-valid': m.branch.valid && (m.branch.dirty || m.branch.touched) }\">\n                                <option value=\"\">-- Select Branch --</option>\n                                <option *ngFor=\"let branch of branchList\" value=\"{{branch.branchId}}\">\n                                    {{ branch.branchName }}\n                                </option>\n                            </select>\n                            <div *ngIf=\"m.branch.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"m.branch.errors.required\">Branch selection is required</div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"row\">\n                        <div class=\"form-group col-md\">\n                            <label for=\"block\">Block :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeBlock($event.target.value)\"\n                                formControlName=\"block\" id=\"block\" [ngClass]=\"{'is-invalid': m.block.invalid \n                                && m.block.touched,'is-valid': m.block.valid && \n                                (m.block.dirty || m.block.touched) }\">\n                                <option value=\"\">-- Select Block --</option>\n                                <option *ngFor=\"let block of villagesOfBranch\" value=\"{{block.blockMasterId}}\">\n                                    {{ block.blockName }}\n                                </option>\n                            </select>\n                            <div *ngIf=\"m.block.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"m.block.errors.required\">Block selection is required</div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"gp\">GP/ Municipality :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeGp($event.target.value)\" formControlName=\"gp\"\n                                id=\"gp\" [ngClass]=\"{'is-invalid': m.gp.invalid && m.gp.touched,\n                              'is-valid': m.gp.valid && (m.gp.dirty || m.gp.touched) }\">\n                                <option value=\"\">-- Select GP/ Municipality --</option>\n                                <option *ngFor=\"let gp of gpList\" value=\"{{gp.gpMunicipalId}}\">\n                                    {{ gp.name }}\n                                </option>\n                            </select>\n                            <div *ngIf=\"m.gp.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"m.gp.errors.required\">\n                                    GP selection is required\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"form-group col-md\">\n                            <label for=\"gram\">Village/ Gram Sansad/ Locality\n                                :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                            <select class=\"form-select\" (change)=\"changeVillage($event.target.value)\"\n                                formControlName=\"gram\" id=\"gram\" [ngClass]=\"{'is-invalid': m.gram.invalid && m.gram.touched,\n                              'is-valid': m.gram.valid && (m.gram.dirty || m.gram.touched) }\">\n                                <option value=\"\">-- Select Village --</option>\n                                <option *ngFor=\"let vill of villageList\" value=\"{{vill.villageMasterId}}\">\n                                    {{ vill.villageName }}\n                                </option>\n                            </select>\n                            <div *ngIf=\"m.gram.errors\" class=\"invalid-feedback\">\n                                <div *ngIf=\"m.gram.errors.required\">\n                                    Village selection is required\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- <div class=\"box_right d-flex lms_block col-md-6\">\n                        <div class=\"serach_field_2\">\n                            <div [ngClass]=\" searchFullscreen? 'search_inner_fullscreen ' : ' search_inner' \">\n                                <form active=\"#\">\n                                    <div class=\"search_field\">\n                                        <input type=\"text\" name=\"search\"\n                                            placeholder=\"Search by family no. & head name ...\"\n                                            [(ngModel)]=\"registerSearch\">\n                                    </div>\n                                    <button type=\"submit\"> <i class=\"fa fa-search\"></i> </button>\n                                </form>\n                            </div>\n                        </div>\n\n                    </div> -->\n\n                    <div class=\"white_box_tittle list_header\">\n\n                        <div class=\"QA_table\">\n                            <div id=\"DataTables_Table_0_wrapper\" class=\"dataTables_wrapper no-footer\">\n                                <table\n                                    class=\"table lms_table_active dataTable no-footer dtr-inline collapsed table table-striped\"\n                                    role=\"grid\" aria-describedby=\"DataTables_Table_0_info\" style=\"table-layout: fixed;\">\n\n                                    <thead id=\"header-fixed\">\n                                        <tr>\n                                            <th style=\"width: 4%;\">Sl.<br>No.</th>\n                                            <th style=\"width: 7%;\">Date</th>\n                                            <th style=\"width: 4%;\">Family No.</th>\n                                            <th style=\"width: 25%;\">Name</th>\n                                            <th style=\"width: 20%;\">Guardian Name</th>\n                                            <th style=\"width: 20%;\">Beneficiary Name</th>\n                                            <th style=\"width: 20%;\">Beneficiary Status</th>\n                                            <th style=\"width: 15%;\">Reason</th>\n                                            <th style=\"width: 15%;\">Place</th>\n                                            <th style=\"width: 15%;\">Type</th>\n                                            <th style=\"width: 15%;\">Done by- <br>Staff/ SS</th>\n                                        </tr>\n                                    </thead>\n\n                                    <!-- <tbody style=\"text-align: center;\">\n                                        <tr\n                                            *ngFor=\"let mat of materialDistributionList | materialDistributionFilter: {family_number : \n                                                registerSearch, first_name :registerSearch,middle_name : registerSearch, \n                                                lastlast_nameName:registerSearch } | paginate: { itemsPerPage: 5, currentPage: p }; index as i\">\n                                            <td style=\"width: 6%;\">{{i+1}}</td>\n                                            <td style=\"width: 10%;\">{{mat.family_number}}</td>\n                                            <td style=\"width: 25%;\">\n                                                {{mat.first_name}}{{mat.middle_name}} {{mat.last_name}}</td>\n                                            <td style=\"width: 20%;\">{{mat.husband_or_guardian_name}}</td>\n                                            <td style=\"width: 15%;\">{{mat.distributionCount}}</td>\n                                            <td style=\"width: 15%;\"\n                                                (click)=\"viewdistributionDetails(detailsOfDistribution, mat)\"\n                                                style=\"cursor: pointer; color: blue;\">\n                                                view</td>\n                                        </tr>\n                                    </tbody> -->\n\n                                </table>\n                                <!-- <pagination-controls class=\"d-flex justify-content-end p-1 current ngx-pagination1\"\n                                    (pageChange)=\"p = $event\" (pageBoundsCorrection)=\"p = $event \">\n                                </pagination-controls> -->\n\n                            </div>\n                        </div>\n                    </div>\n\n                </form>\n\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #createER>\n\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n\n            <div class=\"col-md\">\n                <h3 class=\"dialog-title\">Create Escort/ Refer Register\n                </h3>\n                <!-- <h2 class=\"dialog-title\" *ngIf=\"editHF_eventDetails?.healthForumEventId;\">Edit Escort/ Refer Register\n                </h2> -->\n            </div>\n\n            <div class=\"col-md\">\n                <span class=\"close\" (click)=\"createERModalDismiss()\"\n                    style=\"cursor: pointer;font-size: 35px;float: right; margin-top: -18px;\">&times;</span>\n            </div>\n\n        </div>\n\n        <!-- style=\"height: 35vh; overflow-y: auto;\" -->\n        <div class=\"modal-body\">\n            <form class=\"form-signin\" [formGroup]=\"createEscortReferForm\">\n                <div class=\"form-group col-md-4\">\n                    <label for=\"date\">Date :&nbsp;<span class=\"text-danger\">*&nbsp;</span></label>\n                    <input type=\"date\" class=\"form-control\" formControlName=\"date\" [min]=\"minDate\"\n                        (keydown)=\"restrictTypeOfDate()\" (change)=\"changeDate()\" [ngClass]=\"{'is-invalid': r.date.invalid\n                            && r.date.touched,'is-valid': r.date.valid && (r.date.dirty || r.date.touched) }\">\n                    <div *ngIf=\"r.date.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"r.date.errors.required\">Date selection is required</div>\n                    </div>\n                </div>\n\n                <div id=\"table_wrapper\">\n                    <table class=\"rcorners1\" id=\"table_wrapper\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 4%;\">Sl. No.</th>\n                                <th style=\"width: 4%;\">Family No.</th>\n                                <th style=\"width: 25%;\">Name</th>\n                                <th style=\"width: 20%;\">Guardian Name</th>\n                                <th style=\"width: 20%;\">Village</th>\n                                <th style=\"width: 20%;\">Name of SS </th>\n                                <th style=\"width: 15%;\">Name of Staff</th>\n                                <th style=\"width: 15%;\">Select</th>\n                            </tr>\n                        </thead>\n                    </table>\n                </div>\n\n            </form>\n        </div>\n\n        <div class=\"modal-footer\">\n            <div class=\"row\">\n                <!--  [disabled]=\"!rescheduleSave()\" -->\n                <button type=\"button\" class=\" btn btn-primary btn-sm\" (click)=\"saveEscortRefer()\">Save</button>\n            </div>\n        </div>\n\n    </div>\n</ng-template>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { EscortRerefRegisterRoutingModule } from './escort-reref-register-routing.module';\nimport { EscortRerefRegisterComponent } from './escort-reref-register.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { LoaderModule } from '../shared/loader/loader.module';\n\n@NgModule({\n  declarations: [EscortRerefRegisterComponent],\n  imports: [\n    CommonModule,\n    EscortRerefRegisterRoutingModule,\n    ReactiveFormsModule,\n    NgxPaginationModule, LoaderModule\n  ]\n})\nexport class EscortRerefRegisterModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EscortRerefRegisterService {\n  baseURL = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n  getBranchesOfRegion(obj): any {\n    return this.http.post(`${this.baseURL}branch/getListOfBranchesOfARegion`, obj)\n  }\n\n  getVillagesOfBranch(obj): any {\n    return this.http.post(`${this.baseURL}village/getVillagesOfABranch`, obj)\n  }\n}\n"],"names":["RouterModule","EscortRerefRegisterComponent","routes","path","component","EscortRerefRegisterRoutingModule","forChild","imports","exports","Validators","moment","i0","constructor","sidebarService","http","router","fb","httpService","escortReferService","modalService","config","backdrop","keyboard","ngOnInit","viewEscort_ReferForm","checkRoledetailDTO","then","res","regionBranchHide","regionList","region","lowerRoleBranchId","branchId","dataAccessDTO","JSON","parse","localStorage","getItem","Dto","userId","userName","post","baseURL","subscribe","sessionDTO","status","villagesOfBranch","responseObject","console","log","viewEscortReferForm","group","required","branch","block","gp","gram","m","controls","changeRegion","regionId","req","getBranchesOfRegion","branchList","setValue","gpList","villageList","value","changeBranch","getVillagesOfBranch","changeBlock","blockId","find","blockMasterId","gpDtoList","changeGp","gpId","gpMunicipalId","villageDtoList","changeVillage","villageId","villageID","createEscortRefer","createER","createEscort_ReferForm","modalContent","createERRegisterModal","open","windowClass","minDate","Date","subtract","format","createERModalDismiss","close","createEscortReferForm","date","r","restrictTypeOfDate","selectors","decls","vars","consts","template","ctx","CommonModule","ReactiveFormsModule","NgxPaginationModule","LoaderModule","EscortRerefRegisterModule","declarations","environment","EscortRerefRegisterService","apiUrl","obj","factory","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}